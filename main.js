/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/scanner.ts
async function scanVault(plugin) {
  const vault = plugin.app.vault;
  const patterns = plugin.settings.patterns.map((p) => new RegExp(p, "g"));
  const results = [];
  for (const file of vault.getMarkdownFiles()) {
    const content = await vault.cachedRead(file);
    const lines = content.split("\n");
    lines.forEach((lineText, lineNum) => {
      patterns.forEach((re) => {
        var _a;
        for (const m of lineText.matchAll(re)) {
          results.push({
            file,
            line: lineNum,
            col: (_a = m.index) != null ? _a : 0,
            text: m[0]
          });
        }
      });
    });
  }
  return results;
}
var init_scanner = __esm({
  "src/scanner.ts"() {
  }
});

// src/crypto.ts
async function deriveKey(pwd) {
  const enc = new TextEncoder();
  const keyMaterial = await crypto.subtle.importKey(
    "raw",
    enc.encode(pwd),
    { name: "PBKDF2" },
    false,
    ["deriveKey"]
  );
  return crypto.subtle.deriveKey(
    {
      name: "PBKDF2",
      salt: enc.encode("pii-salt"),
      iterations: 5e4,
      hash: "SHA-256"
    },
    keyMaterial,
    { name: "AES-GCM", length: 256 },
    false,
    ["encrypt", "decrypt"]
  );
}
async function encrypt(text, pwd) {
  const iv = crypto.getRandomValues(new Uint8Array(12));
  const key = await deriveKey(pwd);
  const enc = new TextEncoder().encode(text);
  const buf = await crypto.subtle.encrypt({ name: "AES-GCM", iv }, key, enc);
  return `${Buffer.from(iv).toString("base64")}.${Buffer.from(buf).toString("base64")}`;
}
async function decrypt(data, pwd) {
  const [ivB64, bufB64] = data.split(".");
  const iv = Uint8Array.from(Buffer.from(ivB64, "base64"));
  const buf = Buffer.from(bufB64, "base64");
  const key = await deriveKey(pwd);
  const dec = await crypto.subtle.decrypt({ name: "AES-GCM", iv }, key, buf);
  return new TextDecoder().decode(dec);
}
var init_crypto = __esm({
  "src/crypto.ts"() {
  }
});

// ui/PiiSidebarView.ts
var PiiSidebarView_exports = {};
__export(PiiSidebarView_exports, {
  PiiSidebarView: () => PiiSidebarView,
  PwModal: () => PwModal,
  VIEW_TYPE_PII: () => VIEW_TYPE_PII
});
var import_obsidian, VIEW_TYPE_PII, DRAGGABLE_SELECTION_TIMEOUT, STATUS_MESSAGE_TIMEOUT, makeUUID, PwModal, PiiSidebarView;
var init_PiiSidebarView = __esm({
  "ui/PiiSidebarView.ts"() {
    import_obsidian = require("obsidian");
    init_scanner();
    init_crypto();
    VIEW_TYPE_PII = "pii-sidebar-view";
    DRAGGABLE_SELECTION_TIMEOUT = 5e3;
    STATUS_MESSAGE_TIMEOUT = 3e3;
    makeUUID = () => {
      var _a, _b;
      return (_b = (_a = crypto.randomUUID) == null ? void 0 : _a.call(crypto)) != null ? _b : Date.now().toString(36) + Math.random().toString(36).slice(2, 10);
    };
    PwModal = class extends import_obsidian.Modal {
      constructor(app, title, isEncrypt = false) {
        super(app);
        this.title = title;
        this.isEncrypt = isEncrypt;
      }
      onOpen() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.addClass("pii-modal");
        const contentContainer = containerEl.createDiv({
          cls: "pii-modal-content"
        });
        const titleEl = contentContainer.createEl("h3", {
          cls: "pii-modal-title"
        });
        const icon = this.isEncrypt ? "\u{1F512}" : "\u{1F513}";
        titleEl.innerHTML = `${icon} ${this.title}`;
        const description = this.isEncrypt ? "Enter a password to encrypt your sensitive information. Remember this password as you'll need it to decrypt later." : "Enter your password to decrypt the protected information.";
        contentContainer.createEl("p", {
          text: description,
          cls: "pii-modal-description"
        });
        let pw = "";
        let showPassword = false;
        const formContainer = contentContainer.createDiv({
          cls: "pii-modal-form"
        });
        const pwContainer = formContainer.createDiv({
          cls: "pii-password-container"
        });
        pwContainer.createEl("label", {
          text: "Password",
          cls: "pii-input-label"
        });
        const pwInputWrapper = pwContainer.createDiv({
          cls: "pii-input-wrapper"
        });
        const pwInput = pwInputWrapper.createEl("input", {
          type: "password",
          placeholder: this.isEncrypt ? "Create a strong password" : "Enter your password",
          cls: "pii-password-input"
        });
        pwInput.addEventListener("input", (e) => {
          pw = e.target.value;
        });
        pwInput.focus();
        pwInput.addEventListener("keydown", (e) => {
          if (e.key === "Enter") {
            if (this.isEncrypt) {
              this.validateAndSubmit(pw, confirmPw);
            } else {
              this.submit(pw);
            }
          }
        });
        const toggleBtn = pwInputWrapper.createEl("button", {
          cls: "pii-password-toggle",
          text: "\u{1F441}\uFE0F"
          // Eye icon
        });
        toggleBtn.addEventListener("click", (e) => {
          e.preventDefault();
          showPassword = !showPassword;
          pwInput.type = showPassword ? "text" : "password";
          toggleBtn.textContent = showPassword ? "\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F" : "\u{1F441}\uFE0F";
        });
        let confirmPw = "";
        let confirmInput = null;
        if (this.isEncrypt) {
          const confirmContainer = formContainer.createDiv({
            cls: "pii-password-container"
          });
          confirmContainer.createEl("label", {
            text: "Confirm Password",
            cls: "pii-input-label"
          });
          const confirmInputWrapper = confirmContainer.createDiv({
            cls: "pii-input-wrapper"
          });
          confirmInput = confirmInputWrapper.createEl("input", {
            type: "password",
            placeholder: "Confirm your password",
            cls: "pii-password-input"
          });
          confirmInput.addEventListener("input", (e) => {
            confirmPw = e.target.value;
          });
          confirmInput.addEventListener("keydown", (e) => {
            if (e.key === "Enter") {
              this.validateAndSubmit(pw, confirmPw);
            }
          });
          const confirmToggleBtn = confirmInputWrapper.createEl("button", {
            cls: "pii-password-toggle",
            text: "\u{1F441}\uFE0F"
            // Eye icon
          });
          confirmToggleBtn.addEventListener("click", (e) => {
            e.preventDefault();
            showPassword = !showPassword;
            if (confirmInput) {
              confirmInput.type = showPassword ? "text" : "password";
            }
            confirmToggleBtn.textContent = showPassword ? "\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F" : "\u{1F441}\uFE0F";
            pwInput.type = showPassword ? "text" : "password";
            toggleBtn.textContent = showPassword ? "\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F" : "\u{1F441}\uFE0F";
          });
        }
        const buttonContainer = contentContainer.createDiv({
          cls: "pii-modal-buttons"
        });
        const cancelBtn = buttonContainer.createEl("button", {
          text: "Cancel",
          cls: "pii-btn-secondary"
        });
        cancelBtn.onclick = () => this.close();
        const actionText = this.isEncrypt ? "Encrypt" : "Decrypt";
        const submitBtn = buttonContainer.createEl("button", {
          text: actionText,
          cls: "pii-btn-primary"
        });
        submitBtn.onclick = () => {
          if (this.isEncrypt) {
            this.validateAndSubmit(pw, confirmPw);
          } else {
            this.submit(pw);
          }
        };
      }
      validateAndSubmit(pw, confirmPw) {
        if (!pw) {
          new import_obsidian.Notice("Please enter a password");
          return;
        }
        if (this.isEncrypt && pw !== confirmPw) {
          new import_obsidian.Notice("Passwords do not match");
          return;
        }
        this.submit(pw);
      }
      submit(pw) {
        this.close();
        this._resolve(pw || null);
      }
      onClose() {
        this.contentEl.empty();
      }
      wait() {
        this.open();
        return new Promise((res) => this._resolve = res);
      }
    };
    PiiSidebarView = class extends import_obsidian.ItemView {
      constructor(leaf, plugin) {
        super(leaf);
        this.plugin = plugin;
        this.matches = [];
        this.searchResults = [];
        this.manualSelections = [];
        this.selected = /* @__PURE__ */ new Set();
        this.cachedPassword = null;
        this.currentMode = "scan";
        // Bound event handlers to prevent memory leaks
        this.boundHandleTextSelection = this.handleTextSelection.bind(this);
        this.boundHandleDragStart = this.handleDragStart.bind(this);
      }
      getViewType() {
        return VIEW_TYPE_PII;
      }
      getDisplayText() {
        return "Lock and Find";
      }
      getIcon() {
        return "shield";
      }
      async onOpen() {
        const e = this.containerEl;
        e.empty();
        this.setupTextSelectionDragDrop();
        const modeContainer = e.createEl("div", { cls: "pii-mode-toggle" });
        const scanModeBtn = modeContainer.createEl("button", {
          cls: this.currentMode === "scan" ? "pii-btn-primary" : "pii-btn-secondary",
          text: "Scan Mode"
        });
        const searchModeBtn = modeContainer.createEl("button", {
          cls: this.currentMode === "search" ? "pii-btn-primary" : "pii-btn-secondary",
          text: "Search Mode"
        });
        scanModeBtn.onclick = () => {
          this.currentMode = "scan";
          scanModeBtn.className = "pii-btn-primary";
          searchModeBtn.className = "pii-btn-secondary";
          this.render();
        };
        searchModeBtn.onclick = () => {
          this.currentMode = "search";
          scanModeBtn.className = "pii-btn-secondary";
          searchModeBtn.className = "pii-btn-primary";
          this.render();
        };
        const scanControls = e.createEl("div", { cls: "pii-scan-controls" });
        const scan = scanControls.createEl("button", { cls: "pii-btn-primary pii-btn-half" });
        scan.innerHTML = '<svg viewBox="0 0 24 24" width="16" height="16"><path fill="currentColor" d="M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M5,3H19C20.11,3 21,3.89 21,5V13.03C20.5,12.23 19.81,11.54 19,11V5H5V19H9.5C9.81,19.75 10.26,20.42 10.81,21H5C3.89,21 3,20.11 3,19V5C3,3.89 3.89,3 5,3M7,7H17V9H7V7M7,11H12.03C11.23,11.5 10.54,12.19 10,13H7V11M7,15H9.17C9.06,15.5 9,16 9,16.5V17H7V15Z"></path></svg> Scan Vault';
        const clear = scanControls.createEl("button", { cls: "pii-btn-secondary pii-btn-half" });
        clear.innerHTML = '<svg viewBox="0 0 24 24" width="16" height="16"><path fill="currentColor" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z"></path></svg> Clear';
        scan.onclick = async () => {
          scan.disabled = true;
          scan.innerHTML = '<svg viewBox="0 0 24 24" width="16" height="16"><path fill="currentColor" d="M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z"><animateTransform attributeName="transform" attributeType="XML" type="rotate" dur="1s" from="0 12 12" to="360 12 12" repeatCount="indefinite" /></path></svg> Scanning...';
          this.matches = await scanVault(this.plugin);
          this.selected.clear();
          this.render();
          scan.disabled = false;
          scan.innerHTML = '<svg viewBox="0 0 24 24" width="16" height="16"><path fill="currentColor" d="M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M5,3H19C20.11,3 21,3.89 21,5V13.03C20.5,12.23 19.81,11.54 19,11V5H5V19H9.5C9.81,19.75 10.26,20.42 10.81,21H5C3.89,21 3,20.11 3,19V5C3,3.89 3.89,3 5,3M7,7H17V9H7V7M7,11H12.03C11.23,11.5 10.54,12.19 10,13H7V11M7,15H9.17C9.06,15.5 9,16 9,16.5V17H7V15Z"></path></svg> Scan Vault';
        };
        clear.onclick = () => {
          this.matches = [];
          this.searchResults = [];
          this.manualSelections = [];
          this.selected.clear();
          this.render();
        };
        const searchContainer = e.createEl("div", { cls: "pii-search-container" });
        const searchInput = searchContainer.createEl("input", {
          type: "text",
          placeholder: "Search for text to encrypt...",
          cls: "pii-search-input"
        });
        const searchBtn = searchContainer.createEl("button", { cls: "pii-btn-primary" });
        searchBtn.innerHTML = '<svg viewBox="0 0 24 24" width="16" height="16"><path fill="currentColor" d="M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14Z"></path></svg> Search';
        searchBtn.onclick = async () => {
          const query = searchInput.value.trim();
          if (!query) {
            new import_obsidian.Notice("Please enter search text");
            return;
          }
          searchBtn.disabled = true;
          searchBtn.innerHTML = '<svg viewBox="0 0 24 24" width="16" height="16"><path fill="currentColor" d="M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z"><animateTransform attributeName="transform" attributeType="XML" type="rotate" dur="1s" from="0 12 12" to="360 12 12" repeatCount="indefinite" /></path></svg> Searching...';
          this.searchResults = await this.searchVault(query);
          this.selected.clear();
          this.render();
          searchBtn.disabled = false;
          searchBtn.innerHTML = '<svg viewBox="0 0 24 24" width="16" height="16"><path fill="currentColor" d="M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14Z"></path></svg> Search';
        };
        searchInput.addEventListener("keydown", (e2) => {
          if (e2.key === "Enter") {
            searchBtn.click();
          }
        });
        e.createEl("hr");
        const listContainer = e.createEl("div", { cls: "pii-list" });
        const dropArea = e.createEl("div", { cls: "pii-drop" });
        dropArea.createEl("div", { cls: "pii-drop-icon", text: "" });
        dropArea.createEl("div", { text: "Drag items here to encrypt" });
        const bot = e.createEl("div", { cls: "pii-btn-bar-bottom" });
        const lockBtn = bot.createEl("button", { cls: "pii-btn-primary pii-btn-half" });
        lockBtn.innerHTML = '<svg viewBox="0 0 24 24" width="16" height="16"><path fill="currentColor" d="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z"></path></svg> Lock Selected';
        lockBtn.onclick = () => this.lock();
        const unlockBtn = bot.createEl("button", { cls: "pii-btn-secondary pii-btn-half" });
        unlockBtn.innerHTML = '<svg viewBox="0 0 24 24" width="16" height="16"><path fill="currentColor" d="M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6C4.89,22 4,21.1 4,20V10A2,2 0 0,1 6,8H15V6A3,3 0 0,0 12,3A3,3 0 0,0 9,6H7A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,17A2,2 0 0,0 14,15A2,2 0 0,0 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17Z"></path></svg> Unlock All';
        unlockBtn.onclick = () => this.unlock();
      }
      async onClose() {
        this.containerEl.empty();
        this.cleanupTextSelectionDragDrop();
      }
      /* -------- Text Selection Drag & Drop Setup -------- */
      setupTextSelectionDragDrop() {
        document.addEventListener("mouseup", this.boundHandleTextSelection);
        document.addEventListener("dragstart", this.boundHandleDragStart);
      }
      cleanupTextSelectionDragDrop() {
        document.removeEventListener("mouseup", this.boundHandleTextSelection);
        document.removeEventListener("dragstart", this.boundHandleDragStart);
      }
      handleTextSelection(event) {
        const selection = window.getSelection();
        if (!selection || selection.rangeCount === 0)
          return;
        const selectedText = selection.toString().trim();
        if (!selectedText)
          return;
        const target = event.target;
        const editorContainer = target.closest(".markdown-source-view, .cm-editor");
        if (!editorContainer)
          return;
        const range = selection.getRangeAt(0);
        if (range.collapsed)
          return;
        try {
          const span = document.createElement("span");
          span.draggable = true;
          span.style.backgroundColor = "var(--text-selection)";
          span.style.cursor = "grab";
          span.title = "Drag to encrypt this text";
          span.setAttribute("data-selected-text", selectedText);
          range.surroundContents(span);
          setTimeout(() => {
            if (span && span.parentNode) {
              const parent = span.parentNode;
              while (span.firstChild) {
                parent.insertBefore(span.firstChild, span);
              }
              parent.removeChild(span);
            }
          }, DRAGGABLE_SELECTION_TIMEOUT);
        } catch (e) {
          console.error("Could not make selection draggable:", e);
        }
      }
      handleDragStart(event) {
        const target = event.target;
        const selectedText = target.getAttribute("data-selected-text");
        if (selectedText && event.dataTransfer) {
          event.dataTransfer.setData("text/plain", selectedText);
          event.dataTransfer.setData("application/x-selected-text", selectedText);
          event.dataTransfer.effectAllowed = "copy";
        }
      }
      /* -------- Search Vault -------- */
      async searchVault(query) {
        const results = [];
        const files = this.app.vault.getMarkdownFiles();
        for (const file of files) {
          const content = await this.app.vault.cachedRead(file);
          const lines = content.split("\n");
          for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            let index = 0;
            while ((index = line.toLowerCase().indexOf(query.toLowerCase(), index)) !== -1) {
              const match = {
                text: line.substring(index, index + query.length),
                file,
                line: i,
                col: index
              };
              results.push(match);
              index += query.length;
            }
          }
        }
        return results;
      }
      /* -------- Render UI -------- */
      render() {
        const list = this.containerEl.querySelector(".pii-list");
        const drop = this.containerEl.querySelector(".pii-drop");
        const searchContainer = this.containerEl.querySelector(".pii-search-container");
        const scanControls = this.containerEl.querySelector(".pii-scan-controls");
        const modeContainer = this.containerEl.querySelector(".pii-mode-toggle");
        if (searchContainer) {
          searchContainer.style.display = this.currentMode === "search" ? "flex" : "none";
        }
        if (scanControls) {
          scanControls.style.display = this.currentMode === "scan" ? "flex" : "none";
        }
        list.empty();
        drop.empty();
        drop.createEl("div", { cls: "pii-drop-icon", text: "\u{1F512}" });
        drop.createEl("div", { text: "Drag items here to encrypt" });
        const currentResults = this.currentMode === "scan" ? this.matches : this.searchResults;
        const emptyMessage = this.currentMode === "scan" ? "No sensitive information found" : "No search results found";
        if (!currentResults.length) {
          list.createEl("div", { cls: "pii-empty" });
          list.createEl("div", { cls: "pii-empty" }).innerHTML = '<svg viewBox="0 0 24 24" width="32" height="32" style="opacity: 0.5"><path fill="currentColor" d="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,10.5A1.5,1.5 0 0,0 10.5,12A1.5,1.5 0 0,0 12,13.5A1.5,1.5 0 0,0 13.5,12A1.5,1.5 0 0,0 12,10.5M7.5,10.5A1.5,1.5 0 0,0 6,12A1.5,1.5 0 0,0 7.5,13.5A1.5,1.5 0 0,0 9,12A1.5,1.5 0 0,0 7.5,10.5M16.5,10.5A1.5,1.5 0 0,0 15,12A1.5,1.5 0 0,0 16.5,13.5A1.5,1.5 0 0,0 18,12A1.5,1.5 0 0,0 16.5,10.5Z"></path></svg>';
          list.createEl("p", { text: emptyMessage });
          return;
        }
        currentResults.forEach((m, i) => {
          const row = list.createEl("div", { cls: "pii-row" });
          const textEl = row.createEl("div", { cls: "pii-row-text", text: m.text });
          row.createEl("div", { cls: "pii-row-location", text: `${m.file.basename}:${m.line + 1}` });
          row.setAttr("draggable", "true");
          row.ondragstart = (e) => {
            var _a;
            return (_a = e.dataTransfer) == null ? void 0 : _a.setData("text/plain", String(i));
          };
          row.onclick = async () => {
            var _a;
            const leaf = this.app.workspace.getLeaf(false);
            await leaf.openFile(m.file);
            (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor.setCursor({ line: m.line, ch: m.col });
          };
        });
        drop.ondragover = (e) => {
          e.preventDefault();
          drop.addClass("hover");
        };
        drop.ondragleave = () => drop.removeClass("hover");
        drop.ondrop = (e) => {
          var _a, _b;
          e.preventDefault();
          drop.removeClass("hover");
          const selectedText = (_a = e.dataTransfer) == null ? void 0 : _a.getData("application/x-selected-text");
          if (selectedText) {
            this.addManualSelection(selectedText, drop);
            return;
          }
          const i = parseInt(((_b = e.dataTransfer) == null ? void 0 : _b.getData("text/plain")) || "-1");
          if (i >= 0 && !this.selected.has(i)) {
            this.selected.add(i);
            const tag = drop.createEl("div", { cls: "pii-tag" });
            tag.textContent = currentResults[i].text;
            const removeBtn = tag.createEl("span", { cls: "pii-tag-remove", text: "\xD7" });
            removeBtn.style.marginLeft = "4px";
            removeBtn.style.cursor = "pointer";
            removeBtn.style.fontWeight = "bold";
            removeBtn.onclick = (evt) => {
              evt.stopPropagation();
              this.selected.delete(i);
              tag.remove();
            };
          }
        };
      }
      /* -------- Add Manual Selection -------- */
      addManualSelection(text, dropArea) {
        const id = makeUUID();
        this.manualSelections.push({ text, id });
        const tag = dropArea.createEl("div", { cls: "pii-tag pii-tag-manual" });
        tag.textContent = text;
        tag.setAttribute("data-manual-id", id);
        const removeBtn = tag.createEl("span", { cls: "pii-tag-remove", text: "\xD7" });
        removeBtn.style.marginLeft = "4px";
        removeBtn.style.cursor = "pointer";
        removeBtn.style.fontWeight = "bold";
        removeBtn.onclick = (evt) => {
          evt.stopPropagation();
          this.manualSelections = this.manualSelections.filter((s) => s.id !== id);
          tag.remove();
        };
        new import_obsidian.Notice(`Added "${text.substring(0, 30)}${text.length > 30 ? "..." : ""}" for encryption`);
      }
      /* -------- Encrypt Manual Selection -------- */
      async encryptManualSelection(text, password) {
        const activeFile = this.app.workspace.getActiveFile();
        if (!activeFile) {
          throw new Error("No active file to encrypt text in");
        }
        let fileContent = await this.app.vault.cachedRead(activeFile);
        const index = fileContent.indexOf(text);
        if (index === -1) {
          console.warn(`Text not found in active file: ${text.substring(0, 50)}`);
          new import_obsidian.Notice(`Text not found in active file: "${text.substring(0, 30)}${text.length > 30 ? "..." : ""}"`);
          return;
        }
        const cipher = await encrypt(text, password);
        const wrapped = `<details>
 <summary>Lock</summary>
 \xA7ENC_${makeUUID().slice(0, 6)}_${cipher}\xA7
</details>`;
        fileContent = fileContent.substring(0, index) + wrapped + fileContent.substring(index + text.length);
        await this.app.vault.modify(activeFile, fileContent);
      }
      /* -------- Get Password (with caching) -------- */
      async getPassword(isEncrypt = false) {
        if (this.cachedPassword) {
          return this.cachedPassword;
        }
        if (!isEncrypt && this.plugin.settings.storedPassword) {
          const pwd2 = await new PwModal(this.app, "Enter Your Password", false).wait();
          if (pwd2) {
            const encoder = new TextEncoder();
            const data = encoder.encode(pwd2);
            const hashBuffer = await crypto.subtle.digest("SHA-256", data);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
            if (hashHex === this.plugin.settings.storedPassword) {
              this.cachedPassword = pwd2;
              return pwd2;
            } else {
              new import_obsidian.Notice("Incorrect password");
              return null;
            }
          }
          return null;
        }
        const title = isEncrypt ? "Encrypt Sensitive Information" : "Decrypt Protected Information";
        const pwd = await new PwModal(this.app, title, isEncrypt).wait();
        if (pwd) {
          this.cachedPassword = pwd;
          if (isEncrypt && !this.plugin.settings.storedPassword) {
            const encoder = new TextEncoder();
            const data = encoder.encode(pwd);
            const hashBuffer = await crypto.subtle.digest("SHA-256", data);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
            this.plugin.settings.storedPassword = hashHex;
            await this.plugin.saveSettings();
            new import_obsidian.Notice("Password saved for future use");
          }
        }
        return pwd;
      }
      /* -------- Clear cached password -------- */
      clearCachedPassword() {
        this.cachedPassword = null;
      }
      /* -------- Encrypt (Lock) -------- */
      async lock() {
        const currentResults = this.currentMode === "scan" ? this.matches : this.searchResults;
        if (!this.selected.size) {
          currentResults.forEach((_, i) => this.selected.add(i));
        }
        if (!this.selected.size && !this.manualSelections.length) {
          new import_obsidian.Notice("No items selected for encryption");
          return;
        }
        const pwd = await this.getPassword(true);
        if (!pwd)
          return;
        const totalItems = this.selected.size + this.manualSelections.length;
        const statusBar = this.containerEl.createEl("div", {
          cls: "pii-status",
          text: `Encrypting ${totalItems} item(s)...`
        });
        try {
          let processedCount = 0;
          for (const i of this.selected) {
            const m = currentResults[i];
            const file = m.file;
            let text = await this.app.vault.cachedRead(file);
            const cipher = await encrypt(m.text, pwd);
            const wrapped = `<details>
 <summary>Lock</summary>
 \xA7ENC_${makeUUID().slice(0, 6)}_${cipher}\xA7
</details>`;
            text = text.replace(m.text, wrapped);
            await this.app.vault.modify(file, text);
            processedCount++;
          }
          for (const selection of this.manualSelections) {
            await this.encryptManualSelection(selection.text, pwd);
            processedCount++;
          }
          new import_obsidian.Notice(`Successfully encrypted ${processedCount} item(s)`);
          if (this.currentMode === "scan") {
            this.matches = [];
          } else {
            this.searchResults = [];
          }
          this.selected.clear();
          this.manualSelections = [];
          this.render();
        } catch (error) {
          console.error("Encryption error:", error);
          new import_obsidian.Notice("Error during encryption. Please try again.");
        } finally {
          if (statusBar && statusBar.parentNode) {
            statusBar.remove();
          }
        }
      }
      /* -------- Decrypt (Unlock) -------- */
      async unlock() {
        const pwd = await this.getPassword(false);
        if (!pwd)
          return;
        const encRegex = /<details>\s*<summary>Lock<\/summary>\s*§ENC_[A-Za-z0-9]{6}_(.*?)§\s*<\/details>/g;
        const statusBar = this.containerEl.createEl("div", {
          cls: "pii-status",
          text: "Searching for encrypted content..."
        });
        try {
          let unlocked = 0;
          let filesProcessed = 0;
          const totalFiles = this.app.vault.getMarkdownFiles().length;
          for (const f of this.app.vault.getMarkdownFiles()) {
            filesProcessed++;
            statusBar.textContent = `Processing files... (${filesProcessed}/${totalFiles})`;
            let txt = await this.app.vault.cachedRead(f);
            const matches = [];
            let match;
            while ((match = encRegex.exec(txt)) !== null) {
              matches.push({
                full: match[0],
                cipher: match[1]
              });
            }
            if (matches.length === 0)
              continue;
            statusBar.textContent = `Decrypting content in ${f.basename}...`;
            let changed = false;
            for (const m of matches) {
              try {
                const plain = await decrypt(m.cipher, pwd);
                txt = txt.replace(m.full, plain);
                unlocked++;
                changed = true;
              } catch (e) {
                console.error("Decryption failed:", e);
                if (this.cachedPassword) {
                  this.clearCachedPassword();
                  new import_obsidian.Notice("Decryption failed. Password cache cleared.");
                }
              }
            }
            if (changed)
              await this.app.vault.modify(f, txt);
          }
          if (unlocked > 0) {
            statusBar.textContent = `Successfully decrypted ${unlocked} item(s)`;
            statusBar.addClass("pii-status-success");
            new import_obsidian.Notice(`Successfully decrypted ${unlocked} item(s)`);
          } else {
            statusBar.textContent = "No encrypted content found or incorrect password";
            new import_obsidian.Notice("No encrypted content found or incorrect password");
            this.clearCachedPassword();
          }
          setTimeout(() => {
            if (statusBar && statusBar.parentNode) {
              statusBar.remove();
            }
          }, STATUS_MESSAGE_TIMEOUT);
        } catch (error) {
          console.error("Decryption error:", error);
          new import_obsidian.Notice("Error during decryption. Please try again.");
          if (statusBar && statusBar.parentNode) {
            statusBar.remove();
          }
        }
      }
    };
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PiiLockPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  patterns: ["\\d{6}-\\d{7}", "\\d{3}-\\d{4}-\\d{4}"],
  // Social Security Number-Phone Number Example
  patternMetadata: [
    { pattern: "\\d{6}-\\d{7}", source: "user", displayName: "User Pattern 1" },
    { pattern: "\\d{3}-\\d{4}-\\d{4}", source: "user", displayName: "User Pattern 2" }
  ],
  encryptAlgo: "AES-GCM",
  storedPassword: void 0,
  defaultPatterns: "",
  // Will be loaded from external file
  selectedCountries: []
  // No countries selected by default
};
async function loadDefaultPatternsFromFile(plugin) {
  try {
    const adapter = plugin.app.vault.adapter;
    const pluginDir = plugin.manifest.dir || "";
    const filePath = `${pluginDir}/default-patterns.ini`;
    const content = await adapter.read(filePath);
    return content;
  } catch (error) {
    console.warn("Could not load default-patterns.ini, using empty patterns:", error);
    return "";
  }
}
function parseDefaultPatterns(iniString) {
  const result = {};
  const lines = iniString.split("\n");
  let currentSection = "";
  const countryDisplayNames = {
    "US": "United States",
    "Korea": "South Korea",
    "Japan": "Japan",
    "Taiwan": "Taiwan",
    "India": "India",
    "None": "No Default Pattern"
  };
  for (const line of lines) {
    const trimmed = line.trim();
    if (!trimmed)
      continue;
    if (trimmed.startsWith("[") && trimmed.endsWith("]")) {
      currentSection = trimmed.slice(1, -1);
      result[currentSection] = {
        displayName: countryDisplayNames[currentSection] || currentSection,
        name: "",
        address: "",
        phone: ""
      };
    } else if (currentSection && trimmed.includes("=")) {
      const [key, ...valueParts] = trimmed.split("=");
      const value = valueParts.join("=");
      if (key === "name") {
        result[currentSection].name = value;
      } else if (key === "address") {
        result[currentSection].address = value;
      } else if (key === "phone") {
        result[currentSection].phone = value;
      }
    }
  }
  return result;
}
function serializeDefaultPatterns(patterns) {
  let result = "";
  for (const [country, pattern] of Object.entries(patterns)) {
    result += `[${country}]
`;
    result += `name=${pattern.name}
`;
    result += `address=${pattern.address}
`;
    result += `phone=${pattern.phone}
`;
    if (Object.keys(patterns).indexOf(country) < Object.keys(patterns).length - 1) {
      result += "\n";
    }
  }
  return result;
}
async function saveDefaultPatternsToFile(plugin, content) {
  try {
    const adapter = plugin.app.vault.adapter;
    const pluginDir = plugin.manifest.dir || "";
    const filePath = `${pluginDir}/default-patterns.ini`;
    await adapter.write(filePath, content);
  } catch (error) {
    console.error("Could not save default-patterns.ini:", error);
    new import_obsidian2.Notice("Failed to save default patterns file");
  }
}
async function updatePatternInINI(plugin, oldPattern, newPattern, source, defaultPatterns) {
  if (source !== "user") {
    const countryPattern = defaultPatterns[source];
    if (countryPattern) {
      let updated = false;
      if (countryPattern.name) {
        const namePatterns = countryPattern.name.split("|").filter((p) => p.trim());
        const nameIndex = namePatterns.indexOf(oldPattern);
        if (nameIndex !== -1) {
          namePatterns[nameIndex] = newPattern;
          countryPattern.name = namePatterns.join("|");
          updated = true;
        }
      }
      if (!updated && countryPattern.address) {
        const addressPatterns = countryPattern.address.split("|").filter((p) => p.trim());
        const addressIndex = addressPatterns.indexOf(oldPattern);
        if (addressIndex !== -1) {
          addressPatterns[addressIndex] = newPattern;
          countryPattern.address = addressPatterns.join("|");
          updated = true;
        }
      }
      if (!updated && countryPattern.phone) {
        const phonePatterns = countryPattern.phone.split("|").filter((p) => p.trim());
        const phoneIndex = phonePatterns.indexOf(oldPattern);
        if (phoneIndex !== -1) {
          phonePatterns[phoneIndex] = newPattern;
          countryPattern.phone = phonePatterns.join("|");
          updated = true;
        }
      }
      if (updated) {
        const serialized = serializeDefaultPatterns(defaultPatterns);
        await saveDefaultPatternsToFile(plugin, serialized);
      }
    }
  }
}
var PiiSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async handlePasswordChange() {
    const { PwModal: PwModal2 } = await Promise.resolve().then(() => (init_PiiSidebarView(), PiiSidebarView_exports));
    const modal = new PwModal2(this.app, "Set Encryption Password", true);
    const password = await modal.wait();
    if (password) {
      const encoder = new TextEncoder();
      const data = encoder.encode(password);
      const hashBuffer = await crypto.subtle.digest("SHA-256", data);
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
      this.plugin.settings.storedPassword = hashHex;
      await this.plugin.saveSettings();
      new import_obsidian2.Notice("Password saved successfully");
    }
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.renderContent();
  }
  async renderContent() {
    const { containerEl } = this;
    containerEl.addClass("pii-settings-container");
    const patternsHeader = containerEl.createEl("details");
    patternsHeader.createEl("summary", { text: "Manage Patterns", cls: "pii-collapsible-header" });
    const patternsContainer = patternsHeader.createDiv("pii-patterns-container");
    const defaultPatternsContent = await loadDefaultPatternsFromFile(this.plugin);
    const defaultPatterns = parseDefaultPatterns(defaultPatternsContent);
    if (!this.plugin.settings.patternMetadata) {
      this.plugin.settings.patternMetadata = [];
      let userPatternCount = 1;
      for (const pattern of this.plugin.settings.patterns) {
        this.plugin.settings.patternMetadata.push({
          pattern,
          source: "user",
          displayName: `User Pattern ${userPatternCount}`
        });
        userPatternCount++;
      }
      await this.plugin.saveSettings();
    }
    this.plugin.settings.patternMetadata.forEach((patternMeta, idx) => {
      const s = new import_obsidian2.Setting(patternsContainer).setName(patternMeta.displayName).addText(
        (t) => t.setPlaceholder("\\d{6}-...").setValue(patternMeta.pattern).onChange(async (v) => {
          const oldPattern = patternMeta.pattern;
          this.plugin.settings.patterns[idx] = v;
          this.plugin.settings.patternMetadata[idx].pattern = v;
          await updatePatternInINI(this.plugin, oldPattern, v, patternMeta.source, defaultPatterns);
          await this.plugin.saveSettings();
        })
      ).addExtraButton(
        (btn) => btn.setIcon("trash").setTooltip("remove").onClick(async () => {
          this.plugin.settings.patterns.splice(idx, 1);
          this.plugin.settings.patternMetadata.splice(idx, 1);
          if (patternMeta.source !== "user") {
            const remainingCountryPatterns = this.plugin.settings.patternMetadata.filter((p) => p.source === patternMeta.source);
            if (remainingCountryPatterns.length === 0) {
              this.plugin.settings.selectedCountries = this.plugin.settings.selectedCountries.filter((c) => c !== patternMeta.source);
            }
          }
          await this.plugin.saveSettings();
          this.display();
        })
      );
      if (this.plugin.settings.patterns.length === 1) {
        const button = s.controlEl.querySelector("button");
        if (button)
          button.disabled = true;
      }
    });
    new import_obsidian2.Setting(patternsContainer).addButton(
      (btn) => btn.setButtonText("+").setTooltip("Add pattern").setCta().onClick(async () => {
        const userPatternCount = this.plugin.settings.patternMetadata.filter((p) => p.source === "user").length + 1;
        this.plugin.settings.patterns.push("");
        this.plugin.settings.patternMetadata.push({
          pattern: "",
          source: "user",
          displayName: `User Pattern ${userPatternCount}`
        });
        await this.plugin.saveSettings();
        this.display();
      })
    );
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "Default Patterns" });
    const availableCountries = Object.keys(defaultPatterns).filter((c) => c !== "None");
    const selectedCountries = this.plugin.settings.selectedCountries;
    const selectedCountryNames = selectedCountries.map((c) => {
      var _a;
      return ((_a = defaultPatterns[c]) == null ? void 0 : _a.displayName) || c;
    }).join(", ");
    new import_obsidian2.Setting(containerEl).setName("Selected Countries").setDesc(selectedCountries.length > 0 ? selectedCountryNames : "No countries selected").addButton(
      (btn) => btn.setButtonText("Clear All").onClick(async () => {
        this.plugin.settings.selectedCountries = [];
        const userPatterns = this.plugin.settings.patternMetadata.filter((p) => p.source === "user");
        this.plugin.settings.patterns = userPatterns.map((p) => p.pattern);
        this.plugin.settings.patternMetadata = userPatterns;
        await this.plugin.saveSettings();
        new import_obsidian2.Notice("Cleared all selected countries");
        this.display();
      })
    );
    containerEl.createEl("h4", { text: "Add Country Patterns" });
    const countryButtonsContainer = containerEl.createDiv("pii-country-buttons");
    availableCountries.forEach((country) => {
      const pattern = defaultPatterns[country];
      const isSelected = this.plugin.settings.selectedCountries.includes(country);
      new import_obsidian2.Setting(countryButtonsContainer).setName(pattern.displayName).setDesc(`Add patterns for ${pattern.displayName}`).addButton(
        (btn) => btn.setButtonText(isSelected ? "Remove" : "Add").setClass(isSelected ? "mod-warning" : "mod-cta").onClick(async () => {
          const currentlySelected = this.plugin.settings.selectedCountries.includes(country);
          if (currentlySelected) {
            this.plugin.settings.selectedCountries = this.plugin.settings.selectedCountries.filter((c) => c !== country);
            const allCountryPatterns = [];
            if (pattern.name) {
              const namePatterns = pattern.name.split("|").filter((p) => p.trim());
              allCountryPatterns.push(...namePatterns);
            }
            if (pattern.address) {
              const addressPatterns = pattern.address.split("|").filter((p) => p.trim());
              allCountryPatterns.push(...addressPatterns);
            }
            if (pattern.phone) {
              const phonePatterns = pattern.phone.split("|").filter((p) => p.trim());
              allCountryPatterns.push(...phonePatterns);
            }
            this.plugin.settings.patterns = this.plugin.settings.patterns.filter((p) => !allCountryPatterns.includes(p));
            this.plugin.settings.patternMetadata = this.plugin.settings.patternMetadata.filter((p) => p.source !== country);
            new import_obsidian2.Notice(`Removed ${pattern.displayName} patterns`);
          } else {
            if (!this.plugin.settings.selectedCountries.includes(country)) {
              this.plugin.settings.selectedCountries.push(country);
            } else {
              new import_obsidian2.Notice(`${pattern.displayName} is already selected`);
              return;
            }
            if (pattern.name) {
              const namePatterns = pattern.name.split("|").filter((p) => p.trim());
              this.plugin.settings.patterns = [...this.plugin.settings.patterns, ...namePatterns];
              namePatterns.forEach((namePattern, index) => {
                this.plugin.settings.patternMetadata.push({
                  pattern: namePattern,
                  source: country,
                  displayName: `${country} Name ${index + 1}`
                });
              });
            }
            if (pattern.address) {
              const addressPatterns = pattern.address.split("|").filter((p) => p.trim());
              this.plugin.settings.patterns = [...this.plugin.settings.patterns, ...addressPatterns];
              addressPatterns.forEach((addressPattern, index) => {
                this.plugin.settings.patternMetadata.push({
                  pattern: addressPattern,
                  source: country,
                  displayName: `${country} Address ${index + 1}`
                });
              });
            }
            if (pattern.phone) {
              const phonePatterns = pattern.phone.split("|").filter((p) => p.trim());
              this.plugin.settings.patterns = [...this.plugin.settings.patterns, ...phonePatterns];
              phonePatterns.forEach((phonePattern, index) => {
                this.plugin.settings.patternMetadata.push({
                  pattern: phonePattern,
                  source: country,
                  displayName: `${country} Phone ${index + 1}`
                });
              });
            }
            new import_obsidian2.Notice(`Added ${pattern.displayName} patterns`);
          }
          await this.plugin.saveSettings();
          this.display();
        })
      );
    });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "Password Management" });
    const hasStoredPassword = !!this.plugin.settings.storedPassword;
    const statusText = hasStoredPassword ? "Password is currently stored" : "No password stored";
    const statusEl = containerEl.createEl("p", {
      text: statusText,
      cls: hasStoredPassword ? "pii-password-status-active" : "pii-password-status-inactive"
    });
    new import_obsidian2.Setting(containerEl).setName(hasStoredPassword ? "Change Password" : "Set Password").setDesc(hasStoredPassword ? "Update your encryption password" : "Set a password for encryption operations").addButton(
      (btn) => btn.setButtonText(hasStoredPassword ? "Change" : "Set").setCta().onClick(async () => {
        await this.handlePasswordChange();
        this.display();
      })
    );
    if (hasStoredPassword) {
      new import_obsidian2.Setting(containerEl).setName("Clear Stored Password").setDesc("Remove the stored password. You will be prompted for password on each operation.").addButton(
        (btn) => btn.setButtonText("Clear").setWarning().onClick(async () => {
          this.plugin.settings.storedPassword = void 0;
          await this.plugin.saveSettings();
          new import_obsidian2.Notice("Password cleared successfully");
          this.display();
        })
      );
    }
  }
};

// src/commands.ts
init_scanner();

// ui/ResultsModal.ts
var import_obsidian3 = require("obsidian");
var ResultsModal = class extends import_obsidian3.Modal {
  constructor(app, matches) {
    super(app);
    this.matches = matches;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("pii-modal");
    contentEl.createEl("h3", { text: `PII\xA0Matches (${this.matches.length})` });
    if (!this.matches.length) {
      contentEl.createEl("p", { text: "No PII found \u{1F389}" });
      return;
    }
    const list = contentEl.createEl("div", { cls: "pii-list" });
    this.matches.forEach((m, idx) => {
      const item = list.createEl("div", { cls: "pii-item" });
      const cb = item.createEl("input", { type: "checkbox" });
      cb.checked = true;
      item.createEl("span", {
        text: `${m.text}  \u2014  ${m.file.basename}:${m.line + 1}`,
        cls: "pii-text"
      });
      const goBtn = item.createEl("button", { text: "Open" });
      goBtn.onclick = () => this.openAtPosition(m);
    });
    contentEl.createEl("button", {
      text: "Close",
      cls: "mod-cta"
    }).onclick = () => this.close();
  }
  /** Open the same file and move cursor */
  async openAtPosition(m) {
    const leaf = this.app.workspace.getLeaf(false);
    await leaf.openFile(m.file);
    const view = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (view)
      view.editor.setCursor({ line: m.line, ch: m.col });
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/commands.ts
function registerCommands(plugin) {
  plugin.addCommand({
    id: "pii-scan",
    name: "PII\xA0Scan",
    callback: async () => {
      const results = await scanVault(plugin);
      new ResultsModal(plugin.app, results).open();
    }
  });
  plugin.addCommand({
    id: "pii-lock",
    name: "PII\xA0Lock (encrypt)",
    callback: () => {
    }
  });
  plugin.addCommand({
    id: "pii-unlock",
    name: "PII\xA0Unlock (decrypt)",
    callback: () => {
    }
  });
}

// main.ts
init_PiiSidebarView();
var PiiLockPlugin = class extends import_obsidian4.Plugin {
  /* ──────────── Lifecycle ──────────── */
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_PII,
      (leaf) => new PiiSidebarView(leaf, this)
    );
    this.addRibbonIcon("shield", "Lock and Find", () => this.activateSidebar());
    this.addSettingTab(new PiiSettingTab(this.app, this));
    registerCommands(this);
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_PII);
  }
  /* ──────────── Helpers ──────────── */
  async activateSidebar() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_PII);
    if (leaves.length > 0) {
      this.app.workspace.revealLeaf(leaves[0]);
      return;
    }
    const leaf = this.app.workspace.getLeftLeaf(false);
    await leaf.setViewState({
      type: VIEW_TYPE_PII,
      active: true
    });
    this.app.workspace.revealLeaf(leaf);
  }
  async loadSettings() {
    const saved = await this.loadData();
    this.settings = { ...DEFAULT_SETTINGS, ...saved };
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL3NjYW5uZXIudHMiLCAic3JjL2NyeXB0by50cyIsICJ1aS9QaWlTaWRlYmFyVmlldy50cyIsICJtYWluLnRzIiwgInNyYy9zZXR0aW5ncy50cyIsICJzcmMvY29tbWFuZHMudHMiLCAidWkvUmVzdWx0c01vZGFsLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgdHlwZSBQaWlMb2NrUGx1Z2luIGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hdGNoSW5mbyB7XG4gIGZpbGU6IFRGaWxlOyAgICAgIC8vIGZpbGUgb2JqZWN0XG4gIGxpbmU6IG51bWJlcjsgICAgIC8vIDBcdTIwMTFiYXNlZCByb3cgbnVtYmVyXG4gIGNvbDogbnVtYmVyOyAgICAgIC8vIDBcdTIwMTFiYXNlZCBjb2x1bW4gbnVtYmVyXG4gIHRleHQ6IHN0cmluZzsgICAgIC8vIG1hdGNoZWQgc3RyaW5nXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzY2FuVmF1bHQocGx1Z2luOiBQaWlMb2NrUGx1Z2luKTogUHJvbWlzZTxNYXRjaEluZm9bXT4ge1xuICBjb25zdCB2YXVsdCA9IHBsdWdpbi5hcHAudmF1bHQ7XG4gIGNvbnN0IHBhdHRlcm5zID0gcGx1Z2luLnNldHRpbmdzLnBhdHRlcm5zLm1hcChwID0+IG5ldyBSZWdFeHAocCwgXCJnXCIpKTtcbiAgY29uc3QgcmVzdWx0czogTWF0Y2hJbmZvW10gPSBbXTtcblxuICBmb3IgKGNvbnN0IGZpbGUgb2YgdmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpKSB7XG4gICAgY29uc3QgY29udGVudCA9IGF3YWl0IHZhdWx0LmNhY2hlZFJlYWQoZmlsZSk7XG4gICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KFwiXFxuXCIpO1xuXG4gICAgbGluZXMuZm9yRWFjaCgobGluZVRleHQsIGxpbmVOdW0pID0+IHtcbiAgICAgIHBhdHRlcm5zLmZvckVhY2gocmUgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IG0gb2YgbGluZVRleHQubWF0Y2hBbGwocmUpKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBsaW5lOiBsaW5lTnVtLFxuICAgICAgICAgICAgY29sOiBtLmluZGV4ID8/IDAsXG4gICAgICAgICAgICB0ZXh0OiBtWzBdLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0czsgICAgLy8gVUkoUmVzdWx0c01vZGFsKVxufSIsICIvLyBzcmMvY3J5cHRvLnRzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVyaXZlS2V5KHB3ZDogc3RyaW5nKTogUHJvbWlzZTxDcnlwdG9LZXk+IHtcbiAgY29uc3QgZW5jID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gIGNvbnN0IGtleU1hdGVyaWFsID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgXCJyYXdcIixcbiAgICBlbmMuZW5jb2RlKHB3ZCksXG4gICAgeyBuYW1lOiBcIlBCS0RGMlwiIH0sXG4gICAgZmFsc2UsXG4gICAgW1wiZGVyaXZlS2V5XCJdXG4gICk7XG4gIHJldHVybiBjcnlwdG8uc3VidGxlLmRlcml2ZUtleShcbiAgICB7XG4gICAgICBuYW1lOiBcIlBCS0RGMlwiLFxuICAgICAgc2FsdDogZW5jLmVuY29kZShcInBpaS1zYWx0XCIpLFxuICAgICAgaXRlcmF0aW9uczogNTBfMDAwLFxuICAgICAgaGFzaDogXCJTSEEtMjU2XCIsXG4gICAgfSxcbiAgICBrZXlNYXRlcmlhbCxcbiAgICB7IG5hbWU6IFwiQUVTLUdDTVwiLCBsZW5ndGg6IDI1NiB9LFxuICAgIGZhbHNlLFxuICAgIFtcImVuY3J5cHRcIiwgXCJkZWNyeXB0XCJdXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbmNyeXB0KHRleHQ6IHN0cmluZywgcHdkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBpdiA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMTIpKTtcbiAgY29uc3Qga2V5ID0gYXdhaXQgZGVyaXZlS2V5KHB3ZCk7XG4gIGNvbnN0IGVuYyA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh0ZXh0KTtcbiAgY29uc3QgYnVmID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5lbmNyeXB0KHsgbmFtZTogXCJBRVMtR0NNXCIsIGl2IH0sIGtleSwgZW5jKTtcbiAgcmV0dXJuIGAke0J1ZmZlci5mcm9tKGl2KS50b1N0cmluZyhcImJhc2U2NFwiKX0uJHtCdWZmZXIuZnJvbShidWYpLnRvU3RyaW5nKFwiYmFzZTY0XCIpfWA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWNyeXB0KGRhdGE6IHN0cmluZywgcHdkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBbaXZCNjQsIGJ1ZkI2NF0gPSBkYXRhLnNwbGl0KFwiLlwiKTtcbiAgY29uc3QgaXYgPSBVaW50OEFycmF5LmZyb20oQnVmZmVyLmZyb20oaXZCNjQsIFwiYmFzZTY0XCIpKTtcbiAgY29uc3QgYnVmID0gQnVmZmVyLmZyb20oYnVmQjY0LCBcImJhc2U2NFwiKTtcbiAgY29uc3Qga2V5ID0gYXdhaXQgZGVyaXZlS2V5KHB3ZCk7XG4gIGNvbnN0IGRlYyA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGVjcnlwdCh7IG5hbWU6IFwiQUVTLUdDTVwiLCBpdiB9LCBrZXksIGJ1Zik7XG4gIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoZGVjKTtcbn1cbiIsICJpbXBvcnQge1xuICBJdGVtVmlldywgV29ya3NwYWNlTGVhZiwgTWFya2Rvd25WaWV3LFxuICBNb2RhbCwgU2V0dGluZywgTm90aWNlXG59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHR5cGUgUGlpTG9ja1BsdWdpbiBmcm9tIFwiLi4vbWFpblwiO1xuaW1wb3J0IHsgc2NhblZhdWx0LCBNYXRjaEluZm8gfSBmcm9tIFwiLi4vc3JjL3NjYW5uZXJcIjtcbmltcG9ydCB7IGVuY3J5cHQsIGRlY3J5cHQgfSBmcm9tIFwiLi4vc3JjL2NyeXB0b1wiO1xuXG5leHBvcnQgY29uc3QgVklFV19UWVBFX1BJSSA9IFwicGlpLXNpZGViYXItdmlld1wiO1xuXG4vLyBDb25zdGFudHMgZm9yIHRpbWVvdXRzIGFuZCBVSSBiZWhhdmlvclxuY29uc3QgRFJBR0dBQkxFX1NFTEVDVElPTl9USU1FT1VUID0gNTAwMDsgLy8gNSBzZWNvbmRzXG5jb25zdCBTVEFUVVNfTUVTU0FHRV9USU1FT1VUID0gMzAwMDsgLy8gMyBzZWNvbmRzXG5cbmNvbnN0IG1ha2VVVUlEID0gKCkgPT5cbiAgKGNyeXB0byBhcyBhbnkpLnJhbmRvbVVVSUQ/LigpID8/XG4gIERhdGUubm93KCkudG9TdHJpbmcoMzYpICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiwgMTApO1xuXG4vKiBQYXNzd29yZCBNb2RhbCB3aXRoIGltcHJvdmVkIFVJICovXG5leHBvcnQgY2xhc3MgUHdNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgcHJpdmF0ZSBfcmVzb2x2ZSE6ICh2OiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkO1xuICBjb25zdHJ1Y3RvcihhcHA6IGFueSwgcHJpdmF0ZSB0aXRsZTogc3RyaW5nLCBwcml2YXRlIGlzRW5jcnlwdDogYm9vbGVhbiA9IGZhbHNlKSB7IHN1cGVyKGFwcCk7IH1cblxuICBvbk9wZW4oKSB7XG4gICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgIGNvbnRhaW5lckVsLmFkZENsYXNzKFwicGlpLW1vZGFsXCIpO1xuICAgIFxuICAgIC8vIENyZWF0ZSBhIGNvbnRlbnQgY29udGFpbmVyIHdpdGggcHJvcGVyIHNwYWNpbmdcbiAgICBjb25zdCBjb250ZW50Q29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHtcbiAgICAgIGNsczogXCJwaWktbW9kYWwtY29udGVudFwiXG4gICAgfSk7XG4gICAgXG4gICAgLy8gQWRkIHRpdGxlIHdpdGggaWNvblxuICAgIGNvbnN0IHRpdGxlRWwgPSBjb250ZW50Q29udGFpbmVyLmNyZWF0ZUVsKFwiaDNcIiwge1xuICAgICAgY2xzOiBcInBpaS1tb2RhbC10aXRsZVwiXG4gICAgfSk7XG4gICAgY29uc3QgaWNvbiA9IHRoaXMuaXNFbmNyeXB0ID8gXCJcdUQ4M0RcdUREMTJcIiA6IFwiXHVEODNEXHVERDEzXCI7XG4gICAgdGl0bGVFbC5pbm5lckhUTUwgPSBgJHtpY29ufSAke3RoaXMudGl0bGV9YDtcbiAgICBcbiAgICAvLyBBZGQgZGVzY3JpcHRpb25cbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuaXNFbmNyeXB0IFxuICAgICAgPyBcIkVudGVyIGEgcGFzc3dvcmQgdG8gZW5jcnlwdCB5b3VyIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbi4gUmVtZW1iZXIgdGhpcyBwYXNzd29yZCBhcyB5b3UnbGwgbmVlZCBpdCB0byBkZWNyeXB0IGxhdGVyLlwiXG4gICAgICA6IFwiRW50ZXIgeW91ciBwYXNzd29yZCB0byBkZWNyeXB0IHRoZSBwcm90ZWN0ZWQgaW5mb3JtYXRpb24uXCI7XG4gICAgXG4gICAgY29udGVudENvbnRhaW5lci5jcmVhdGVFbChcInBcIiwgeyBcbiAgICAgIHRleHQ6IGRlc2NyaXB0aW9uLFxuICAgICAgY2xzOiBcInBpaS1tb2RhbC1kZXNjcmlwdGlvblwiXG4gICAgfSk7XG4gIFxuICAgIGxldCBwdyA9IFwiXCI7XG4gICAgbGV0IHNob3dQYXNzd29yZCA9IGZhbHNlO1xuICAgIFxuICAgIC8vIENyZWF0ZSBmb3JtIGNvbnRhaW5lclxuICAgIGNvbnN0IGZvcm1Db250YWluZXIgPSBjb250ZW50Q29udGFpbmVyLmNyZWF0ZURpdih7XG4gICAgICBjbHM6IFwicGlpLW1vZGFsLWZvcm1cIlxuICAgIH0pO1xuICAgIFxuICAgIC8vIFBhc3N3b3JkIGZpZWxkIGNvbnRhaW5lclxuICAgIGNvbnN0IHB3Q29udGFpbmVyID0gZm9ybUNvbnRhaW5lci5jcmVhdGVEaXYoe1xuICAgICAgY2xzOiBcInBpaS1wYXNzd29yZC1jb250YWluZXJcIlxuICAgIH0pO1xuICAgIFxuICAgIC8vIFBhc3N3b3JkIGxhYmVsXG4gICAgcHdDb250YWluZXIuY3JlYXRlRWwoXCJsYWJlbFwiLCB7XG4gICAgICB0ZXh0OiBcIlBhc3N3b3JkXCIsXG4gICAgICBjbHM6IFwicGlpLWlucHV0LWxhYmVsXCJcbiAgICB9KTtcbiAgICBcbiAgICAvLyBQYXNzd29yZCBpbnB1dCB3cmFwcGVyIGZvciBwb3NpdGlvbmluZyB0aGUgdG9nZ2xlIGJ1dHRvblxuICAgIGNvbnN0IHB3SW5wdXRXcmFwcGVyID0gcHdDb250YWluZXIuY3JlYXRlRGl2KHtcbiAgICAgIGNsczogXCJwaWktaW5wdXQtd3JhcHBlclwiXG4gICAgfSk7XG4gICAgXG4gICAgLy8gUGFzc3dvcmQgaW5wdXRcbiAgICBjb25zdCBwd0lucHV0ID0gcHdJbnB1dFdyYXBwZXIuY3JlYXRlRWwoXCJpbnB1dFwiLCB7XG4gICAgICB0eXBlOiBcInBhc3N3b3JkXCIsXG4gICAgICBwbGFjZWhvbGRlcjogdGhpcy5pc0VuY3J5cHQgPyBcIkNyZWF0ZSBhIHN0cm9uZyBwYXNzd29yZFwiIDogXCJFbnRlciB5b3VyIHBhc3N3b3JkXCIsXG4gICAgICBjbHM6IFwicGlpLXBhc3N3b3JkLWlucHV0XCJcbiAgICB9KTtcbiAgICBcbiAgICBwd0lucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZSkgPT4ge1xuICAgICAgcHcgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgfSk7XG4gICAgXG4gICAgLy8gRm9jdXMgb24gdGhlIGlucHV0IHdoZW4gbW9kYWwgb3BlbnNcbiAgICBwd0lucHV0LmZvY3VzKCk7XG4gICAgXG4gICAgLy8gSGFuZGxlIEVudGVyIGtleVxuICAgIHB3SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZSA9PiB7XG4gICAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICBpZiAodGhpcy5pc0VuY3J5cHQpIHtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRlQW5kU3VibWl0KHB3LCBjb25maXJtUHcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3VibWl0KHB3KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIEFkZCBzaG93L2hpZGUgcGFzc3dvcmQgdG9nZ2xlXG4gICAgY29uc3QgdG9nZ2xlQnRuID0gcHdJbnB1dFdyYXBwZXIuY3JlYXRlRWwoXCJidXR0b25cIiwge1xuICAgICAgY2xzOiBcInBpaS1wYXNzd29yZC10b2dnbGVcIixcbiAgICAgIHRleHQ6IFwiXHVEODNEXHVEQzQxXHVGRTBGXCIgLy8gRXllIGljb25cbiAgICB9KTtcbiAgICBcbiAgICB0b2dnbGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzaG93UGFzc3dvcmQgPSAhc2hvd1Bhc3N3b3JkO1xuICAgICAgcHdJbnB1dC50eXBlID0gc2hvd1Bhc3N3b3JkID8gXCJ0ZXh0XCIgOiBcInBhc3N3b3JkXCI7XG4gICAgICB0b2dnbGVCdG4udGV4dENvbnRlbnQgPSBzaG93UGFzc3dvcmQgPyBcIlx1RDgzRFx1REM0MVx1RkUwRlx1MjAwRFx1RDgzRFx1RERFOFx1RkUwRlwiIDogXCJcdUQ4M0RcdURDNDFcdUZFMEZcIjsgLy8gRXllIHdpdGggc2xhc2ggd2hlbiBoaWRkZW5cbiAgICB9KTtcbiAgICBcbiAgICAvLyBBZGQgY29uZmlybWF0aW9uIGZpZWxkIGlmIGVuY3J5cHRpbmdcbiAgICBsZXQgY29uZmlybVB3ID0gXCJcIjtcbiAgICBsZXQgY29uZmlybUlucHV0OiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gICAgaWYgKHRoaXMuaXNFbmNyeXB0KSB7XG4gICAgICBjb25zdCBjb25maXJtQ29udGFpbmVyID0gZm9ybUNvbnRhaW5lci5jcmVhdGVEaXYoe1xuICAgICAgICBjbHM6IFwicGlpLXBhc3N3b3JkLWNvbnRhaW5lclwiXG4gICAgICB9KTtcbiAgICAgIGNvbmZpcm1Db250YWluZXIuY3JlYXRlRWwoXCJsYWJlbFwiLCB7XG4gICAgICAgIHRleHQ6IFwiQ29uZmlybSBQYXNzd29yZFwiLFxuICAgICAgICBjbHM6IFwicGlpLWlucHV0LWxhYmVsXCJcbiAgICAgIH0pO1xuICAgICAgY29uc3QgY29uZmlybUlucHV0V3JhcHBlciA9IGNvbmZpcm1Db250YWluZXIuY3JlYXRlRGl2KHtcbiAgICAgICAgY2xzOiBcInBpaS1pbnB1dC13cmFwcGVyXCJcbiAgICAgIH0pO1xuICAgICAgY29uZmlybUlucHV0ID0gY29uZmlybUlucHV0V3JhcHBlci5jcmVhdGVFbChcImlucHV0XCIsIHtcbiAgICAgICAgdHlwZTogXCJwYXNzd29yZFwiLFxuICAgICAgICBwbGFjZWhvbGRlcjogXCJDb25maXJtIHlvdXIgcGFzc3dvcmRcIixcbiAgICAgICAgY2xzOiBcInBpaS1wYXNzd29yZC1pbnB1dFwiXG4gICAgICB9KTtcbiAgICAgIGNvbmZpcm1JbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGUpID0+IHtcbiAgICAgICAgY29uZmlybVB3ID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEhhbmRsZSBFbnRlciBrZXkgZm9yIGNvbmZpcm1hdGlvbiBmaWVsZFxuICAgICAgY29uZmlybUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGUgPT4ge1xuICAgICAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgIHRoaXMudmFsaWRhdGVBbmRTdWJtaXQocHcsIGNvbmZpcm1Qdyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBBZGQgc2hvdy9oaWRlIHBhc3N3b3JkIHRvZ2dsZSBmb3IgY29uZmlybWF0aW9uXG4gICAgICBjb25zdCBjb25maXJtVG9nZ2xlQnRuID0gY29uZmlybUlucHV0V3JhcHBlci5jcmVhdGVFbChcImJ1dHRvblwiLCB7XG4gICAgICAgIGNsczogXCJwaWktcGFzc3dvcmQtdG9nZ2xlXCIsXG4gICAgICAgIHRleHQ6IFwiXHVEODNEXHVEQzQxXHVGRTBGXCIgLy8gRXllIGljb25cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25maXJtVG9nZ2xlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNob3dQYXNzd29yZCA9ICFzaG93UGFzc3dvcmQ7XG4gICAgICAgIGlmIChjb25maXJtSW5wdXQpIHtcbiAgICAgICAgICBjb25maXJtSW5wdXQudHlwZSA9IHNob3dQYXNzd29yZCA/IFwidGV4dFwiIDogXCJwYXNzd29yZFwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpcm1Ub2dnbGVCdG4udGV4dENvbnRlbnQgPSBzaG93UGFzc3dvcmQgPyBcIlx1RDgzRFx1REM0MVx1RkUwRlx1MjAwRFx1RDgzRFx1RERFOFx1RkUwRlwiIDogXCJcdUQ4M0RcdURDNDFcdUZFMEZcIjtcbiAgICAgICAgcHdJbnB1dC50eXBlID0gc2hvd1Bhc3N3b3JkID8gXCJ0ZXh0XCIgOiBcInBhc3N3b3JkXCI7XG4gICAgICAgIHRvZ2dsZUJ0bi50ZXh0Q29udGVudCA9IHNob3dQYXNzd29yZCA/IFwiXHVEODNEXHVEQzQxXHVGRTBGXHUyMDBEXHVEODNEXHVEREU4XHVGRTBGXCIgOiBcIlx1RDgzRFx1REM0MVx1RkUwRlwiO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIEJ1dHRvbiBjb250YWluZXJcbiAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBjb250ZW50Q29udGFpbmVyLmNyZWF0ZURpdih7XG4gICAgICBjbHM6IFwicGlpLW1vZGFsLWJ1dHRvbnNcIlxuICAgIH0pO1xuICAgIFxuICAgIC8vIENhbmNlbCBidXR0b25cbiAgICBjb25zdCBjYW5jZWxCdG4gPSBidXR0b25Db250YWluZXIuY3JlYXRlRWwoXCJidXR0b25cIiwge1xuICAgICAgdGV4dDogXCJDYW5jZWxcIixcbiAgICAgIGNsczogXCJwaWktYnRuLXNlY29uZGFyeVwiXG4gICAgfSk7XG4gICAgXG4gICAgY2FuY2VsQnRuLm9uY2xpY2sgPSAoKSA9PiB0aGlzLmNsb3NlKCk7XG4gICAgXG4gICAgLy8gU3VibWl0IGJ1dHRvblxuICAgIGNvbnN0IGFjdGlvblRleHQgPSB0aGlzLmlzRW5jcnlwdCA/IFwiRW5jcnlwdFwiIDogXCJEZWNyeXB0XCI7XG4gICAgY29uc3Qgc3VibWl0QnRuID0gYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHtcbiAgICAgIHRleHQ6IGFjdGlvblRleHQsXG4gICAgICBjbHM6IFwicGlpLWJ0bi1wcmltYXJ5XCJcbiAgICB9KTtcbiAgICBcbiAgICBzdWJtaXRCdG4ub25jbGljayA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzRW5jcnlwdCkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlQW5kU3VibWl0KHB3LCBjb25maXJtUHcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdWJtaXQocHcpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlQW5kU3VibWl0KHB3OiBzdHJpbmcsIGNvbmZpcm1Qdzogc3RyaW5nKSB7XG4gICAgaWYgKCFwdykge1xuICAgICAgbmV3IE5vdGljZShcIlBsZWFzZSBlbnRlciBhIHBhc3N3b3JkXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBpZiAodGhpcy5pc0VuY3J5cHQgJiYgcHcgIT09IGNvbmZpcm1Qdykge1xuICAgICAgbmV3IE5vdGljZShcIlBhc3N3b3JkcyBkbyBub3QgbWF0Y2hcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHRoaXMuc3VibWl0KHB3KTtcbiAgfVxuXG4gIHByaXZhdGUgc3VibWl0KHB3OiBzdHJpbmcpIHtcbiAgICB0aGlzLmNsb3NlKCk7XG4gICAgdGhpcy5fcmVzb2x2ZShwdyB8fCBudWxsKTtcbiAgfVxuXG4gIG9uQ2xvc2UoKSB7IHRoaXMuY29udGVudEVsLmVtcHR5KCk7IH1cbiAgXG4gIHdhaXQoKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgdGhpcy5vcGVuKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlcyA9PiAodGhpcy5fcmVzb2x2ZSA9IHJlcykpO1xuICB9XG59XG5cblxuLyogXHUyNTAwXHUyNTAwIFNpZGViYXIgVmlldyBcdTI1MDAgKi9cbmV4cG9ydCBjbGFzcyBQaWlTaWRlYmFyVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcbiAgcHJpdmF0ZSBtYXRjaGVzOiBNYXRjaEluZm9bXSA9IFtdO1xuICBwcml2YXRlIHNlYXJjaFJlc3VsdHM6IE1hdGNoSW5mb1tdID0gW107XG4gIHByaXZhdGUgbWFudWFsU2VsZWN0aW9uczoge3RleHQ6IHN0cmluZywgaWQ6IHN0cmluZ31bXSA9IFtdO1xuICBwcml2YXRlIHNlbGVjdGVkOiBTZXQ8bnVtYmVyPiA9IG5ldyBTZXQoKTtcbiAgcHJpdmF0ZSBjYWNoZWRQYXNzd29yZDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgY3VycmVudE1vZGU6ICdzY2FuJyB8ICdzZWFyY2gnID0gJ3NjYW4nO1xuICBcbiAgLy8gQm91bmQgZXZlbnQgaGFuZGxlcnMgdG8gcHJldmVudCBtZW1vcnkgbGVha3NcbiAgcHJpdmF0ZSBib3VuZEhhbmRsZVRleHRTZWxlY3Rpb24gPSB0aGlzLmhhbmRsZVRleHRTZWxlY3Rpb24uYmluZCh0aGlzKTtcbiAgcHJpdmF0ZSBib3VuZEhhbmRsZURyYWdTdGFydCA9IHRoaXMuaGFuZGxlRHJhZ1N0YXJ0LmJpbmQodGhpcyk7XG4gIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHByaXZhdGUgcGx1Z2luOlBpaUxvY2tQbHVnaW4pe3N1cGVyKGxlYWYpO31cbiAgZ2V0Vmlld1R5cGUoKXtyZXR1cm4gVklFV19UWVBFX1BJSTt9XG4gIGdldERpc3BsYXlUZXh0KCl7cmV0dXJuIFwiTG9jayBhbmQgRmluZFwiO31cbiAgZ2V0SWNvbigpe3JldHVybiBcInNoaWVsZFwiO31cblxuICBhc3luYyBvbk9wZW4oKXtcbiAgICBjb25zdCBlPXRoaXMuY29udGFpbmVyRWw7IGUuZW1wdHkoKTtcbiAgICBcbiAgICAvLyBTZXQgdXAgZ2xvYmFsIHRleHQgc2VsZWN0aW9uIGxpc3RlbmVycyBmb3IgZHJhZyBhbmQgZHJvcFxuICAgIHRoaXMuc2V0dXBUZXh0U2VsZWN0aW9uRHJhZ0Ryb3AoKTtcblxuICAgIC8vIE1vZGUgdG9nZ2xlIGJ1dHRvbnNcbiAgICBjb25zdCBtb2RlQ29udGFpbmVyID0gZS5jcmVhdGVFbChcImRpdlwiLCB7Y2xzOiBcInBpaS1tb2RlLXRvZ2dsZVwifSk7XG4gICAgY29uc3Qgc2Nhbk1vZGVCdG4gPSBtb2RlQ29udGFpbmVyLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHtcbiAgICAgIGNsczogdGhpcy5jdXJyZW50TW9kZSA9PT0gJ3NjYW4nID8gXCJwaWktYnRuLXByaW1hcnlcIiA6IFwicGlpLWJ0bi1zZWNvbmRhcnlcIixcbiAgICAgIHRleHQ6IFwiU2NhbiBNb2RlXCJcbiAgICB9KTtcbiAgICBjb25zdCBzZWFyY2hNb2RlQnRuID0gbW9kZUNvbnRhaW5lci5jcmVhdGVFbChcImJ1dHRvblwiLCB7XG4gICAgICBjbHM6IHRoaXMuY3VycmVudE1vZGUgPT09ICdzZWFyY2gnID8gXCJwaWktYnRuLXByaW1hcnlcIiA6IFwicGlpLWJ0bi1zZWNvbmRhcnlcIiwgXG4gICAgICB0ZXh0OiBcIlNlYXJjaCBNb2RlXCJcbiAgICB9KTtcblxuICAgIHNjYW5Nb2RlQnRuLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLmN1cnJlbnRNb2RlID0gJ3NjYW4nO1xuICAgICAgc2Nhbk1vZGVCdG4uY2xhc3NOYW1lID0gXCJwaWktYnRuLXByaW1hcnlcIjtcbiAgICAgIHNlYXJjaE1vZGVCdG4uY2xhc3NOYW1lID0gXCJwaWktYnRuLXNlY29uZGFyeVwiO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9O1xuXG4gICAgc2VhcmNoTW9kZUJ0bi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5jdXJyZW50TW9kZSA9ICdzZWFyY2gnO1xuICAgICAgc2Nhbk1vZGVCdG4uY2xhc3NOYW1lID0gXCJwaWktYnRuLXNlY29uZGFyeVwiO1xuICAgICAgc2VhcmNoTW9kZUJ0bi5jbGFzc05hbWUgPSBcInBpaS1idG4tcHJpbWFyeVwiO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9O1xuXG4gICAgLy8gU2NhbiBjb250cm9scyAob25seSBzaG93IGluIHNjYW4gbW9kZSlcbiAgICBjb25zdCBzY2FuQ29udHJvbHMgPSBlLmNyZWF0ZUVsKFwiZGl2XCIsIHtjbHM6IFwicGlpLXNjYW4tY29udHJvbHNcIn0pO1xuICAgIFxuICAgIC8vIFNjYW4gYnV0dG9uIHdpdGggaWNvblxuICAgIGNvbnN0IHNjYW4gPSBzY2FuQ29udHJvbHMuY3JlYXRlRWwoXCJidXR0b25cIiwge2NsczogXCJwaWktYnRuLXByaW1hcnkgcGlpLWJ0bi1oYWxmXCJ9KTtcbiAgICBzY2FuLmlubmVySFRNTCA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0xNS41LDEyQzE4LDEyIDIwLDE0IDIwLDE2LjVDMjAsMTcuMzggMTkuNzUsMTguMjEgMTkuMzEsMTguOUwyMi4zOSwyMkwyMSwyMy4zOUwxNy44OCwyMC4zMkMxNy4xOSwyMC43NSAxNi4zNywyMSAxNS41LDIxQzEzLDIxIDExLDE5IDExLDE2LjVDMTEsMTQgMTMsMTIgMTUuNSwxMk0xNS41LDE0QTIuNSwyLjUgMCAwLDAgMTMsMTYuNUEyLjUsMi41IDAgMCwwIDE1LjUsMTlBMi41LDIuNSAwIDAsMCAxOCwxNi41QTIuNSwyLjUgMCAwLDAgMTUuNSwxNE01LDNIMTlDMjAuMTEsMyAyMSwzLjg5IDIxLDVWMTMuMDNDMjAuNSwxMi4yMyAxOS44MSwxMS41NCAxOSwxMVY1SDVWMTlIOS41QzkuODEsMTkuNzUgMTAuMjYsMjAuNDIgMTAuODEsMjFINUMzLjg5LDIxIDMsMjAuMTEgMywxOVY1QzMsMy44OSAzLjg5LDMgNSwzTTcsN0gxN1Y5SDdWN003LDExSDEyLjAzQzExLjIzLDExLjUgMTAuNTQsMTIuMTkgMTAsMTNIN1YxMU03LDE1SDkuMTdDOS4wNiwxNS41IDksMTYgOSwxNi41VjE3SDdWMTVaXCI+PC9wYXRoPjwvc3ZnPiBTY2FuIFZhdWx0JztcbiAgICBcbiAgICAvLyBDbGVhciBidXR0b24gd2l0aCBpY29uXG4gICAgY29uc3QgY2xlYXIgPSBzY2FuQ29udHJvbHMuY3JlYXRlRWwoXCJidXR0b25cIiwge2NsczogXCJwaWktYnRuLXNlY29uZGFyeSBwaWktYnRuLWhhbGZcIn0pO1xuICAgIGNsZWFyLmlubmVySFRNTCA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0xOSw0SDE1LjVMMTQuNSwzSDkuNUw4LjUsNEg1VjZIMTlNNiwxOUEyLDIgMCAwLDAgOCwyMUgxNkEyLDIgMCAwLDAgMTgsMTlWN0g2VjE5WlwiPjwvcGF0aD48L3N2Zz4gQ2xlYXInO1xuICAgIFxuICAgIHNjYW4ub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgIHNjYW4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgc2Nhbi5pbm5lckhUTUwgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMTIsNFYyQTEwLDEwIDAgMCwwIDIsMTJINEE4LDggMCAwLDEgMTIsNFpcIj48YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPVwidHJhbnNmb3JtXCIgYXR0cmlidXRlVHlwZT1cIlhNTFwiIHR5cGU9XCJyb3RhdGVcIiBkdXI9XCIxc1wiIGZyb209XCIwIDEyIDEyXCIgdG89XCIzNjAgMTIgMTJcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIiAvPjwvcGF0aD48L3N2Zz4gU2Nhbm5pbmcuLi4nO1xuICAgICAgdGhpcy5tYXRjaGVzID0gYXdhaXQgc2NhblZhdWx0KHRoaXMucGx1Z2luKTtcbiAgICAgIHRoaXMuc2VsZWN0ZWQuY2xlYXIoKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICBzY2FuLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICBzY2FuLmlubmVySFRNTCA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0xNS41LDEyQzE4LDEyIDIwLDE0IDIwLDE2LjVDMjAsMTcuMzggMTkuNzUsMTguMjEgMTkuMzEsMTguOUwyMi4zOSwyMkwyMSwyMy4zOUwxNy44OCwyMC4zMkMxNy4xOSwyMC43NSAxNi4zNywyMSAxNS41LDIxQzEzLDIxIDExLDE5IDExLDE2LjVDMTEsMTQgMTMsMTIgMTUuNSwxMk0xNS41LDE0QTIuNSwyLjUgMCAwLDAgMTMsMTYuNUEyLjUsMi41IDAgMCwwIDE1LjUsMTlBMi41LDIuNSAwIDAsMCAxOCwxNi41QTIuNSwyLjUgMCAwLDAgMTUuNSwxNE01LDNIMTlDMjAuMTEsMyAyMSwzLjg5IDIxLDVWMTMuMDNDMjAuNSwxMi4yMyAxOS44MSwxMS41NCAxOSwxMVY1SDVWMTlIOS41QzkuODEsMTkuNzUgMTAuMjYsMjAuNDIgMTAuODEsMjFINUMzLjg5LDIxIDMsMjAuMTEgMywxOVY1QzMsMy44OSAzLjg5LDMgNSwzTTcsN0gxN1Y5SDdWN003LDExSDEyLjAzQzExLjIzLDExLjUgMTAuNTQsMTIuMTkgMTAsMTNIN1YxMU03LDE1SDkuMTdDOS4wNiwxNS41IDksMTYgOSwxNi41VjE3SDdWMTVaXCI+PC9wYXRoPjwvc3ZnPiBTY2FuIFZhdWx0JztcbiAgICB9O1xuICAgIFxuICAgIGNsZWFyLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLm1hdGNoZXMgPSBbXTtcbiAgICAgIHRoaXMuc2VhcmNoUmVzdWx0cyA9IFtdO1xuICAgICAgdGhpcy5tYW51YWxTZWxlY3Rpb25zID0gW107XG4gICAgICB0aGlzLnNlbGVjdGVkLmNsZWFyKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH07XG5cbiAgICAvLyBTZWFyY2ggaW5wdXQgKG9ubHkgc2hvdyBpbiBzZWFyY2ggbW9kZSlcbiAgICBjb25zdCBzZWFyY2hDb250YWluZXIgPSBlLmNyZWF0ZUVsKFwiZGl2XCIsIHtjbHM6IFwicGlpLXNlYXJjaC1jb250YWluZXJcIn0pO1xuICAgIGNvbnN0IHNlYXJjaElucHV0ID0gc2VhcmNoQ29udGFpbmVyLmNyZWF0ZUVsKFwiaW5wdXRcIiwge1xuICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICBwbGFjZWhvbGRlcjogXCJTZWFyY2ggZm9yIHRleHQgdG8gZW5jcnlwdC4uLlwiLFxuICAgICAgY2xzOiBcInBpaS1zZWFyY2gtaW5wdXRcIlxuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IHNlYXJjaEJ0biA9IHNlYXJjaENvbnRhaW5lci5jcmVhdGVFbChcImJ1dHRvblwiLCB7Y2xzOiBcInBpaS1idG4tcHJpbWFyeVwifSk7XG4gICAgc2VhcmNoQnRuLmlubmVySFRNTCA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0xNS41LDEyQzE4LDEyIDIwLDE0IDIwLDE2LjVDMjAsMTcuMzggMTkuNzUsMTguMjEgMTkuMzEsMTguOUwyMi4zOSwyMkwyMSwyMy4zOUwxNy44OCwyMC4zMkMxNy4xOSwyMC43NSAxNi4zNywyMSAxNS41LDIxQzEzLDIxIDExLDE5IDExLDE2LjVDMTEsMTQgMTMsMTIgMTUuNSwxMk0xNS41LDE0QTIuNSwyLjUgMCAwLDAgMTMsMTYuNUEyLjUsMi41IDAgMCwwIDE1LjUsMTlBMi41LDIuNSAwIDAsMCAxOCwxNi41QTIuNSwyLjUgMCAwLDAgMTUuNSwxNFpcIj48L3BhdGg+PC9zdmc+IFNlYXJjaCc7XG5cbiAgICBzZWFyY2hCdG4ub25jbGljayA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gc2VhcmNoSW5wdXQudmFsdWUudHJpbSgpO1xuICAgICAgaWYgKCFxdWVyeSkge1xuICAgICAgICBuZXcgTm90aWNlKFwiUGxlYXNlIGVudGVyIHNlYXJjaCB0ZXh0XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBcbiAgICAgIHNlYXJjaEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICBzZWFyY2hCdG4uaW5uZXJIVE1MID0gJzxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTEyLDRWMkExMCwxMCAwIDAsMCAyLDEySDRBOCw4IDAgMCwxIDEyLDRaXCI+PGFuaW1hdGVUcmFuc2Zvcm0gYXR0cmlidXRlTmFtZT1cInRyYW5zZm9ybVwiIGF0dHJpYnV0ZVR5cGU9XCJYTUxcIiB0eXBlPVwicm90YXRlXCIgZHVyPVwiMXNcIiBmcm9tPVwiMCAxMiAxMlwiIHRvPVwiMzYwIDEyIDEyXCIgcmVwZWF0Q291bnQ9XCJpbmRlZmluaXRlXCIgLz48L3BhdGg+PC9zdmc+IFNlYXJjaGluZy4uLic7XG4gICAgICBcbiAgICAgIHRoaXMuc2VhcmNoUmVzdWx0cyA9IGF3YWl0IHRoaXMuc2VhcmNoVmF1bHQocXVlcnkpO1xuICAgICAgdGhpcy5zZWxlY3RlZC5jbGVhcigpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIFxuICAgICAgc2VhcmNoQnRuLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICBzZWFyY2hCdG4uaW5uZXJIVE1MID0gJzxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTE1LjUsMTJDMTgsMTIgMjAsMTQgMjAsMTYuNUMyMCwxNy4zOCAxOS43NSwxOC4yMSAxOS4zMSwxOC45TDIyLjM5LDIyTDIxLDIzLjM5TDE3Ljg4LDIwLjMyQzE3LjE5LDIwLjc1IDE2LjM3LDIxIDE1LjUsMjFDMTMsMjEgMTEsMTkgMTEsMTYuNUMxMSwxNCAxMywxMiAxNS41LDEyTTE1LjUsMTRBMi41LDIuNSAwIDAsMCAxMywxNi41QTIuNSwyLjUgMCAwLDAgMTUuNSwxOUEyLjUsMi41IDAgMCwwIDE4LDE2LjVBMi41LDIuNSAwIDAsMCAxNS41LDE0WlwiPjwvcGF0aD48L3N2Zz4gU2VhcmNoJztcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIEVudGVyIGtleSBpbiBzZWFyY2ggaW5wdXRcbiAgICBzZWFyY2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuICAgICAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgc2VhcmNoQnRuLmNsaWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBlLmNyZWF0ZUVsKFwiaHJcIik7XG4gICAgXG4gICAgLy8gUmVzdWx0cyBsaXN0IHdpdGggYmV0dGVyIHN0eWxpbmdcbiAgICBjb25zdCBsaXN0Q29udGFpbmVyID0gZS5jcmVhdGVFbChcImRpdlwiLHtjbHM6XCJwaWktbGlzdFwifSk7XG4gICAgXG4gICAgLy8gRHJvcCBhcmVhIHdpdGggaWNvbiBhbmQgYmV0dGVyIGluc3RydWN0aW9uc1xuICAgIGNvbnN0IGRyb3BBcmVhID0gZS5jcmVhdGVFbChcImRpdlwiLHtjbHM6XCJwaWktZHJvcFwifSk7XG4gICAgZHJvcEFyZWEuY3JlYXRlRWwoXCJkaXZcIiwge2NsczogXCJwaWktZHJvcC1pY29uXCIsIHRleHQ6IFwiXCJ9KTtcbiAgICBkcm9wQXJlYS5jcmVhdGVFbChcImRpdlwiLCB7dGV4dDogXCJEcmFnIGl0ZW1zIGhlcmUgdG8gZW5jcnlwdFwifSk7XG5cbiAgICAvKiBGb290ZXI6IExvY2sgLyBVbmxvY2sgYnV0dG9ucyAqL1xuICAgIGNvbnN0IGJvdD1lLmNyZWF0ZUVsKFwiZGl2XCIse2NsczpcInBpaS1idG4tYmFyLWJvdHRvbVwifSk7XG4gICAgXG4gICAgLy8gTG9jayBidXR0b24gd2l0aCBpY29uXG4gICAgY29uc3QgbG9ja0J0biA9IGJvdC5jcmVhdGVFbChcImJ1dHRvblwiLHtjbHM6XCJwaWktYnRuLXByaW1hcnkgcGlpLWJ0bi1oYWxmXCJ9KTtcbiAgICBsb2NrQnRuLmlubmVySFRNTCA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0xMiwxN0EyLDIgMCAwLDAgMTQsMTVDMTQsMTMuODkgMTMuMSwxMyAxMiwxM0EyLDIgMCAwLDAgMTAsMTVBMiwyIDAgMCwwIDEyLDE3TTE4LDhBMiwyIDAgMCwxIDIwLDEwVjIwQTIsMiAwIDAsMSAxOCwyMkg2QTIsMiAwIDAsMSA0LDIwVjEwQzQsOC44OSA0LjksOCA2LDhIN1Y2QTUsNSAwIDAsMSAxMiwxQTUsNSAwIDAsMSAxNyw2VjhIMThNMTIsM0EzLDMgMCAwLDAgOSw2VjhIMTVWNkEzLDMgMCAwLDAgMTIsM1pcIj48L3BhdGg+PC9zdmc+IExvY2sgU2VsZWN0ZWQnO1xuICAgIGxvY2tCdG4ub25jbGljaz0oKT0+dGhpcy5sb2NrKCk7XG4gICAgXG4gICAgLy8gVW5sb2NrIGJ1dHRvbiB3aXRoIGljb25cbiAgICBjb25zdCB1bmxvY2tCdG4gPSBib3QuY3JlYXRlRWwoXCJidXR0b25cIix7Y2xzOlwicGlpLWJ0bi1zZWNvbmRhcnkgcGlpLWJ0bi1oYWxmXCJ9KTtcbiAgICB1bmxvY2tCdG4uaW5uZXJIVE1MID0gJzxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTE4LDhBMiwyIDAgMCwxIDIwLDEwVjIwQTIsMiAwIDAsMSAxOCwyMkg2QzQuODksMjIgNCwyMS4xIDQsMjBWMTBBMiwyIDAgMCwxIDYsOEgxNVY2QTMsMyAwIDAsMCAxMiwzQTMsMyAwIDAsMCA5LDZIN0E1LDUgMCAwLDEgMTIsMUE1LDUgMCAwLDEgMTcsNlY4SDE4TTEyLDE3QTIsMiAwIDAsMCAxNCwxNUEyLDIgMCAwLDAgMTIsMTNBMiwyIDAgMCwwIDEwLDE1QTIsMiAwIDAsMCAxMiwxN1pcIj48L3BhdGg+PC9zdmc+IFVubG9jayBBbGwnO1xuICAgIHVubG9ja0J0bi5vbmNsaWNrPSgpPT50aGlzLnVubG9jaygpO1xuICB9XG4gIGFzeW5jIG9uQ2xvc2UoKXtcbiAgICB0aGlzLmNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgdGhpcy5jbGVhbnVwVGV4dFNlbGVjdGlvbkRyYWdEcm9wKCk7XG4gIH1cblxuICAvKiAtLS0tLS0tLSBUZXh0IFNlbGVjdGlvbiBEcmFnICYgRHJvcCBTZXR1cCAtLS0tLS0tLSAqL1xuICBwcml2YXRlIHNldHVwVGV4dFNlbGVjdGlvbkRyYWdEcm9wKCkge1xuICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnMgdG8gZGV0ZWN0IHRleHQgc2VsZWN0aW9uIGFuZCBlbmFibGUgZHJhZ2dpbmdcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5ib3VuZEhhbmRsZVRleHRTZWxlY3Rpb24pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIHRoaXMuYm91bmRIYW5kbGVEcmFnU3RhcnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhbnVwVGV4dFNlbGVjdGlvbkRyYWdEcm9wKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmJvdW5kSGFuZGxlVGV4dFNlbGVjdGlvbik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgdGhpcy5ib3VuZEhhbmRsZURyYWdTdGFydCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVRleHRTZWxlY3Rpb24oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKCFzZWxlY3Rpb24gfHwgc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDApIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBzZWxlY3RlZFRleHQgPSBzZWxlY3Rpb24udG9TdHJpbmcoKS50cmltKCk7XG4gICAgaWYgKCFzZWxlY3RlZFRleHQpIHJldHVybjtcbiAgICBcbiAgICAvLyBDaGVjayBpZiB0aGUgc2VsZWN0aW9uIGlzIHdpdGhpbiBhbiBlZGl0b3JcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3QgZWRpdG9yQ29udGFpbmVyID0gdGFyZ2V0LmNsb3Nlc3QoJy5tYXJrZG93bi1zb3VyY2UtdmlldywgLmNtLWVkaXRvcicpO1xuICAgIGlmICghZWRpdG9yQ29udGFpbmVyKSByZXR1cm47XG4gICAgXG4gICAgLy8gTWFrZSB0aGUgc2VsZWN0ZWQgdGV4dCBkcmFnZ2FibGUgYnkgY3JlYXRpbmcgYSB0ZW1wb3JhcnkgZHJhZ2dhYmxlIGVsZW1lbnRcbiAgICBjb25zdCByYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgIGlmIChyYW5nZS5jb2xsYXBzZWQpIHJldHVybjtcbiAgICBcbiAgICAvLyBDcmVhdGUgYSB0ZW1wb3JhcnkgZHJhZ2dhYmxlIHdyYXBwZXIgYXJvdW5kIHRoZSBzZWxlY3Rpb25cbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIHNwYW4uZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgIHNwYW4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3ZhcigtLXRleHQtc2VsZWN0aW9uKSc7XG4gICAgICBzcGFuLnN0eWxlLmN1cnNvciA9ICdncmFiJztcbiAgICAgIHNwYW4udGl0bGUgPSAnRHJhZyB0byBlbmNyeXB0IHRoaXMgdGV4dCc7XG4gICAgICBcbiAgICAgIC8vIFN0b3JlIHRoZSBzZWxlY3RlZCB0ZXh0IGRhdGEgZm9yIGRyYWcgYW5kIGRyb3BcbiAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdkYXRhLXNlbGVjdGVkLXRleHQnLCBzZWxlY3RlZFRleHQpO1xuICAgICAgXG4gICAgICByYW5nZS5zdXJyb3VuZENvbnRlbnRzKHNwYW4pO1xuICAgICAgXG4gICAgICAvLyBSZW1vdmUgdGhlIGRyYWdnYWJsZSB3cmFwcGVyIGFmdGVyIGEgc2hvcnQgZGVsYXkgaWYgbm90IGRyYWdnZWRcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoc3BhbiAmJiBzcGFuLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBjb25zdCBwYXJlbnQgPSBzcGFuLnBhcmVudE5vZGU7XG4gICAgICAgICAgd2hpbGUgKHNwYW4uZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShzcGFuLmZpcnN0Q2hpbGQsIHNwYW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoc3Bhbik7XG4gICAgICAgIH1cbiAgICAgIH0sIERSQUdHQUJMRV9TRUxFQ1RJT05fVElNRU9VVCk7XG4gICAgICBcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDb3VsZCBub3QgbWFrZSBzZWxlY3Rpb24gZHJhZ2dhYmxlOicsIGUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRHJhZ1N0YXJ0KGV2ZW50OiBEcmFnRXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zZWxlY3RlZC10ZXh0Jyk7XG4gICAgXG4gICAgaWYgKHNlbGVjdGVkVGV4dCAmJiBldmVudC5kYXRhVHJhbnNmZXIpIHtcbiAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgc2VsZWN0ZWRUZXh0KTtcbiAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCdhcHBsaWNhdGlvbi94LXNlbGVjdGVkLXRleHQnLCBzZWxlY3RlZFRleHQpO1xuICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnY29weSc7XG4gICAgfVxuICB9XG5cbiAgLyogLS0tLS0tLS0gU2VhcmNoIFZhdWx0IC0tLS0tLS0tICovXG4gIHByaXZhdGUgYXN5bmMgc2VhcmNoVmF1bHQocXVlcnk6IHN0cmluZyk6IFByb21pc2U8TWF0Y2hJbmZvW10+IHtcbiAgICBjb25zdCByZXN1bHRzOiBNYXRjaEluZm9bXSA9IFtdO1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIFxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNhY2hlZFJlYWQoZmlsZSk7XG4gICAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICAgICAgXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXTtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgXG4gICAgICAgIC8vIEZpbmQgYWxsIG9jY3VycmVuY2VzIG9mIHRoZSBxdWVyeSBpbiB0aGlzIGxpbmVcbiAgICAgICAgd2hpbGUgKChpbmRleCA9IGxpbmUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHF1ZXJ5LnRvTG93ZXJDYXNlKCksIGluZGV4KSkgIT09IC0xKSB7XG4gICAgICAgICAgY29uc3QgbWF0Y2g6IE1hdGNoSW5mbyA9IHtcbiAgICAgICAgICAgIHRleHQ6IGxpbmUuc3Vic3RyaW5nKGluZGV4LCBpbmRleCArIHF1ZXJ5Lmxlbmd0aCksXG4gICAgICAgICAgICBmaWxlOiBmaWxlLFxuICAgICAgICAgICAgbGluZTogaSxcbiAgICAgICAgICAgIGNvbDogaW5kZXhcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc3VsdHMucHVzaChtYXRjaCk7XG4gICAgICAgICAgaW5kZXggKz0gcXVlcnkubGVuZ3RoOyAvLyBNb3ZlIHBhc3QgdGhpcyBtYXRjaCB0byBmaW5kIG5leHQgb2NjdXJyZW5jZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgLyogLS0tLS0tLS0gUmVuZGVyIFVJIC0tLS0tLS0tICovXG4gIHByaXZhdGUgcmVuZGVyKCl7XG4gICAgY29uc3QgbGlzdCA9IHRoaXMuY29udGFpbmVyRWwucXVlcnlTZWxlY3RvcihcIi5waWktbGlzdFwiKSBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdCBkcm9wID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKFwiLnBpaS1kcm9wXCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IHNlYXJjaENvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyRWwucXVlcnlTZWxlY3RvcihcIi5waWktc2VhcmNoLWNvbnRhaW5lclwiKSBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdCBzY2FuQ29udHJvbHMgPSB0aGlzLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoXCIucGlpLXNjYW4tY29udHJvbHNcIikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3QgbW9kZUNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyRWwucXVlcnlTZWxlY3RvcihcIi5waWktbW9kZS10b2dnbGVcIikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgXG4gICAgLy8gU2hvdy9oaWRlIGNvbnRyb2xzIGJhc2VkIG9uIG1vZGVcbiAgICBpZiAoc2VhcmNoQ29udGFpbmVyKSB7XG4gICAgICBzZWFyY2hDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IHRoaXMuY3VycmVudE1vZGUgPT09ICdzZWFyY2gnID8gJ2ZsZXgnIDogJ25vbmUnO1xuICAgIH1cbiAgICBpZiAoc2NhbkNvbnRyb2xzKSB7XG4gICAgICBzY2FuQ29udHJvbHMuc3R5bGUuZGlzcGxheSA9IHRoaXMuY3VycmVudE1vZGUgPT09ICdzY2FuJyA/ICdmbGV4JyA6ICdub25lJztcbiAgICB9XG4gICAgXG4gICAgLy8gQ2xlYXIgcHJldmlvdXMgY29udGVudFxuICAgIGxpc3QuZW1wdHkoKTtcbiAgICBcbiAgICAvLyBSZXNldCBkcm9wIGFyZWFcbiAgICBkcm9wLmVtcHR5KCk7XG4gICAgZHJvcC5jcmVhdGVFbChcImRpdlwiLCB7Y2xzOiBcInBpaS1kcm9wLWljb25cIiwgdGV4dDogXCJcdUQ4M0RcdUREMTJcIn0pO1xuICAgIGRyb3AuY3JlYXRlRWwoXCJkaXZcIiwge3RleHQ6IFwiRHJhZyBpdGVtcyBoZXJlIHRvIGVuY3J5cHRcIn0pO1xuXG4gICAgLy8gR2V0IGN1cnJlbnQgcmVzdWx0cyBiYXNlZCBvbiBtb2RlXG4gICAgY29uc3QgY3VycmVudFJlc3VsdHMgPSB0aGlzLmN1cnJlbnRNb2RlID09PSAnc2NhbicgPyB0aGlzLm1hdGNoZXMgOiB0aGlzLnNlYXJjaFJlc3VsdHM7XG4gICAgY29uc3QgZW1wdHlNZXNzYWdlID0gdGhpcy5jdXJyZW50TW9kZSA9PT0gJ3NjYW4nID8gXCJObyBzZW5zaXRpdmUgaW5mb3JtYXRpb24gZm91bmRcIiA6IFwiTm8gc2VhcmNoIHJlc3VsdHMgZm91bmRcIjtcblxuICAgIC8vIFNob3cgZW1wdHkgc3RhdGUgaWYgbm8gcmVzdWx0c1xuICAgIGlmKCFjdXJyZW50UmVzdWx0cy5sZW5ndGgpe1xuICAgICAgbGlzdC5jcmVhdGVFbChcImRpdlwiLCB7Y2xzOiBcInBpaS1lbXB0eVwifSk7XG4gICAgICBsaXN0LmNyZWF0ZUVsKFwiZGl2XCIsIHtjbHM6IFwicGlpLWVtcHR5XCJ9KS5pbm5lckhUTUwgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgc3R5bGU9XCJvcGFjaXR5OiAwLjVcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0xMiwyQTEwLDEwIDAgMCwwIDIsMTJBMTAsMTAgMCAwLDAgMTIsMjJBMTAsMTAgMCAwLDAgMjIsMTJBMTAsMTAgMCAwLDAgMTIsMk0xMiw0QTgsOCAwIDAsMSAyMCwxMkE4LDggMCAwLDEgMTIsMjBBOCw4IDAgMCwxIDQsMTJBOCw4IDAgMCwxIDEyLDRNMTIsMTAuNUExLjUsMS41IDAgMCwwIDEwLjUsMTJBMS41LDEuNSAwIDAsMCAxMiwxMy41QTEuNSwxLjUgMCAwLDAgMTMuNSwxMkExLjUsMS41IDAgMCwwIDEyLDEwLjVNNy41LDEwLjVBMS41LDEuNSAwIDAsMCA2LDEyQTEuNSwxLjUgMCAwLDAgNy41LDEzLjVBMS41LDEuNSAwIDAsMCA5LDEyQTEuNSwxLjUgMCAwLDAgNy41LDEwLjVNMTYuNSwxMC41QTEuNSwxLjUgMCAwLDAgMTUsMTJBMS41LDEuNSAwIDAsMCAxNi41LDEzLjVBMS41LDEuNSAwIDAsMCAxOCwxMkExLjUsMS41IDAgMCwwIDE2LjUsMTAuNVpcIj48L3BhdGg+PC9zdmc+JztcbiAgICAgIGxpc3QuY3JlYXRlRWwoXCJwXCIsIHt0ZXh0OiBlbXB0eU1lc3NhZ2V9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgcm93cyBmb3IgZWFjaCByZXN1bHRcbiAgICBjdXJyZW50UmVzdWx0cy5mb3JFYWNoKChtLGkpPT57XG4gICAgICBjb25zdCByb3cgPSBsaXN0LmNyZWF0ZUVsKFwiZGl2XCIsIHtjbHM6IFwicGlpLXJvd1wifSk7XG4gICAgICBcbiAgICAgIC8vIEFkZCB0ZXh0IGNvbnRlbnQgd2l0aCBlbGxpcHNpcyBmb3IgbG9uZyB0ZXh0XG4gICAgICBjb25zdCB0ZXh0RWwgPSByb3cuY3JlYXRlRWwoXCJkaXZcIiwge2NsczogXCJwaWktcm93LXRleHRcIiwgdGV4dDogbS50ZXh0fSk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBmaWxlIGxvY2F0aW9uIGluZm9cbiAgICAgIHJvdy5jcmVhdGVFbChcImRpdlwiLCB7Y2xzOiBcInBpaS1yb3ctbG9jYXRpb25cIiwgdGV4dDogYCR7bS5maWxlLmJhc2VuYW1lfToke20ubGluZSsxfWB9KTtcbiAgICAgIFxuICAgICAgLy8gTWFrZSByb3cgZHJhZ2dhYmxlXG4gICAgICByb3cuc2V0QXR0cihcImRyYWdnYWJsZVwiLCBcInRydWVcIik7XG4gICAgICByb3cub25kcmFnc3RhcnQgPSBlID0+IGUuZGF0YVRyYW5zZmVyPy5zZXREYXRhKFwidGV4dC9wbGFpblwiLCBTdHJpbmcoaSkpO1xuICAgICAgXG4gICAgICAvLyBNYWtlIHJvdyBjbGlja2FibGUgdG8gbmF2aWdhdGUgdG8gdGhlIGZpbGUgbG9jYXRpb25cbiAgICAgIHJvdy5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoZmFsc2UpO1xuICAgICAgICBhd2FpdCBsZWFmLm9wZW5GaWxlKG0uZmlsZSk7XG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldylcbiAgICAgICAgICA/LmVkaXRvci5zZXRDdXJzb3Ioe2xpbmU6IG0ubGluZSwgY2g6IG0uY29sfSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gU2V0IHVwIGRyb3AgYXJlYSBpbnRlcmFjdGlvbnNcbiAgICBkcm9wLm9uZHJhZ292ZXIgPSBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTsgXG4gICAgICBkcm9wLmFkZENsYXNzKFwiaG92ZXJcIik7XG4gICAgfTtcbiAgICBcbiAgICBkcm9wLm9uZHJhZ2xlYXZlID0gKCkgPT4gZHJvcC5yZW1vdmVDbGFzcyhcImhvdmVyXCIpO1xuICAgIFxuICAgIGRyb3Aub25kcm9wID0gZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7IFxuICAgICAgZHJvcC5yZW1vdmVDbGFzcyhcImhvdmVyXCIpO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgbWFudWFsbHkgc2VsZWN0ZWQgdGV4dCBkcm9wXG4gICAgICBjb25zdCBzZWxlY3RlZFRleHQgPSBlLmRhdGFUcmFuc2Zlcj8uZ2V0RGF0YShcImFwcGxpY2F0aW9uL3gtc2VsZWN0ZWQtdGV4dFwiKTtcbiAgICAgIGlmIChzZWxlY3RlZFRleHQpIHtcbiAgICAgICAgdGhpcy5hZGRNYW51YWxTZWxlY3Rpb24oc2VsZWN0ZWRUZXh0LCBkcm9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBIYW5kbGUgZXhpc3RpbmcgZHJhZyBhbmQgZHJvcCBmcm9tIHJlc3VsdHMgbGlzdFxuICAgICAgY29uc3QgaSA9IHBhcnNlSW50KGUuZGF0YVRyYW5zZmVyPy5nZXREYXRhKFwidGV4dC9wbGFpblwiKSB8fCBcIi0xXCIpO1xuICAgICAgaWYgKGkgPj0gMCAmJiAhdGhpcy5zZWxlY3RlZC5oYXMoaSkpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZC5hZGQoaSk7XG4gICAgICAgIGNvbnN0IHRhZyA9IGRyb3AuY3JlYXRlRWwoXCJkaXZcIiwge2NsczogXCJwaWktdGFnXCJ9KTtcbiAgICAgICAgdGFnLnRleHRDb250ZW50ID0gY3VycmVudFJlc3VsdHNbaV0udGV4dDtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCBhIHJlbW92ZSBidXR0b24gdG8gdGhlIHRhZ1xuICAgICAgICBjb25zdCByZW1vdmVCdG4gPSB0YWcuY3JlYXRlRWwoXCJzcGFuXCIsIHtjbHM6IFwicGlpLXRhZy1yZW1vdmVcIiwgdGV4dDogXCJcdTAwRDdcIn0pO1xuICAgICAgICByZW1vdmVCdG4uc3R5bGUubWFyZ2luTGVmdCA9IFwiNHB4XCI7XG4gICAgICAgIHJlbW92ZUJ0bi5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgcmVtb3ZlQnRuLnN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcbiAgICAgICAgXG4gICAgICAgIHJlbW92ZUJ0bi5vbmNsaWNrID0gKGV2dCkgPT4ge1xuICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkLmRlbGV0ZShpKTtcbiAgICAgICAgICB0YWcucmVtb3ZlKCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qIC0tLS0tLS0tIEFkZCBNYW51YWwgU2VsZWN0aW9uIC0tLS0tLS0tICovXG4gIHByaXZhdGUgYWRkTWFudWFsU2VsZWN0aW9uKHRleHQ6IHN0cmluZywgZHJvcEFyZWE6IEhUTUxFbGVtZW50KSB7XG4gICAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgSUQgZm9yIHRoaXMgc2VsZWN0aW9uXG4gICAgY29uc3QgaWQgPSBtYWtlVVVJRCgpO1xuICAgIFxuICAgIC8vIEFkZCB0byBtYW51YWwgc2VsZWN0aW9uc1xuICAgIHRoaXMubWFudWFsU2VsZWN0aW9ucy5wdXNoKHt0ZXh0LCBpZH0pO1xuICAgIFxuICAgIC8vIENyZWF0ZSBhIHRhZyBpbiB0aGUgZHJvcCBhcmVhXG4gICAgY29uc3QgdGFnID0gZHJvcEFyZWEuY3JlYXRlRWwoXCJkaXZcIiwge2NsczogXCJwaWktdGFnIHBpaS10YWctbWFudWFsXCJ9KTtcbiAgICB0YWcudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWFudWFsLWlkJywgaWQpO1xuICAgIFxuICAgIC8vIEFkZCBhIHJlbW92ZSBidXR0b24gdG8gdGhlIHRhZ1xuICAgIGNvbnN0IHJlbW92ZUJ0biA9IHRhZy5jcmVhdGVFbChcInNwYW5cIiwge2NsczogXCJwaWktdGFnLXJlbW92ZVwiLCB0ZXh0OiBcIlx1MDBEN1wifSk7XG4gICAgcmVtb3ZlQnRuLnN0eWxlLm1hcmdpbkxlZnQgPSBcIjRweFwiO1xuICAgIHJlbW92ZUJ0bi5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICByZW1vdmVCdG4uc3R5bGUuZm9udFdlaWdodCA9IFwiYm9sZFwiO1xuICAgIFxuICAgIHJlbW92ZUJ0bi5vbmNsaWNrID0gKGV2dCkgPT4ge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgLy8gUmVtb3ZlIGZyb20gbWFudWFsIHNlbGVjdGlvbnNcbiAgICAgIHRoaXMubWFudWFsU2VsZWN0aW9ucyA9IHRoaXMubWFudWFsU2VsZWN0aW9ucy5maWx0ZXIocyA9PiBzLmlkICE9PSBpZCk7XG4gICAgICB0YWcucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBcbiAgICBuZXcgTm90aWNlKGBBZGRlZCBcIiR7dGV4dC5zdWJzdHJpbmcoMCwgMzApfSR7dGV4dC5sZW5ndGggPiAzMCA/ICcuLi4nIDogJyd9XCIgZm9yIGVuY3J5cHRpb25gKTtcbiAgfVxuXG4gIC8qIC0tLS0tLS0tIEVuY3J5cHQgTWFudWFsIFNlbGVjdGlvbiAtLS0tLS0tLSAqL1xuICBwcml2YXRlIGFzeW5jIGVuY3J5cHRNYW51YWxTZWxlY3Rpb24odGV4dDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gR2V0IHRoZSBjdXJyZW50bHkgYWN0aXZlIGZpbGVcbiAgICBjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICBpZiAoIWFjdGl2ZUZpbGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGFjdGl2ZSBmaWxlIHRvIGVuY3J5cHQgdGV4dCBpblwiKTtcbiAgICB9XG4gICAgXG4gICAgLy8gUmVhZCB0aGUgZmlsZSBjb250ZW50XG4gICAgbGV0IGZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY2FjaGVkUmVhZChhY3RpdmVGaWxlKTtcbiAgICBcbiAgICAvLyBGaW5kIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIHRoZSB0ZXh0XG4gICAgY29uc3QgaW5kZXggPSBmaWxlQ29udGVudC5pbmRleE9mKHRleHQpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIGNvbnNvbGUud2FybihgVGV4dCBub3QgZm91bmQgaW4gYWN0aXZlIGZpbGU6ICR7dGV4dC5zdWJzdHJpbmcoMCwgNTApfWApO1xuICAgICAgbmV3IE5vdGljZShgVGV4dCBub3QgZm91bmQgaW4gYWN0aXZlIGZpbGU6IFwiJHt0ZXh0LnN1YnN0cmluZygwLCAzMCl9JHt0ZXh0Lmxlbmd0aCA+IDMwID8gJy4uLicgOiAnJ31cImApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyBFbmNyeXB0IHRoZSB0ZXh0XG4gICAgY29uc3QgY2lwaGVyID0gYXdhaXQgZW5jcnlwdCh0ZXh0LCBwYXNzd29yZCk7XG4gICAgY29uc3Qgd3JhcHBlZCA9IGA8ZGV0YWlscz5cXG4gPHN1bW1hcnk+TG9jazwvc3VtbWFyeT5cXG4gXHUwMEE3RU5DXyR7bWFrZVVVSUQoKS5zbGljZSgwLDYpfV8ke2NpcGhlcn1cdTAwQTdcXG48L2RldGFpbHM+YDtcbiAgICBcbiAgICAvLyBSZXBsYWNlIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIHRoZSB0ZXh0IHdpdGggZW5jcnlwdGVkIHZlcnNpb25cbiAgICBmaWxlQ29udGVudCA9IGZpbGVDb250ZW50LnN1YnN0cmluZygwLCBpbmRleCkgKyB3cmFwcGVkICsgZmlsZUNvbnRlbnQuc3Vic3RyaW5nKGluZGV4ICsgdGV4dC5sZW5ndGgpO1xuICAgIFxuICAgIC8vIFNhdmUgdGhlIG1vZGlmaWVkIGZpbGVcbiAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5tb2RpZnkoYWN0aXZlRmlsZSwgZmlsZUNvbnRlbnQpO1xuICB9XG5cbiAgLyogLS0tLS0tLS0gR2V0IFBhc3N3b3JkICh3aXRoIGNhY2hpbmcpIC0tLS0tLS0tICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0UGFzc3dvcmQoaXNFbmNyeXB0OiBib29sZWFuID0gZmFsc2UpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgICAvLyBJZiB3ZSBoYXZlIGEgY2FjaGVkIHBhc3N3b3JkLCB1c2UgaXRcbiAgICBpZiAodGhpcy5jYWNoZWRQYXNzd29yZCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkUGFzc3dvcmQ7XG4gICAgfVxuICAgIFxuICAgIC8vIElmIHdlIGhhdmUgYSBzdG9yZWQgcGFzc3dvcmQgYW5kIHRoaXMgaXMgZGVjcnlwdGlvbiwgdHJ5IHRvIHVzZSB0aGUgc3RvcmVkIG9uZVxuICAgIGlmICghaXNFbmNyeXB0ICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLnN0b3JlZFBhc3N3b3JkKSB7XG4gICAgICAvLyBGb3Igbm93LCB3ZSBzdGlsbCBuZWVkIHRvIHByb21wdCBmb3IgdGhlIGFjdHVhbCBwYXNzd29yZCBzaW5jZSB3ZSBvbmx5IHN0b3JlIGhhc2hcbiAgICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgeW91J2QgdXNlIHByb3BlciBrZXkgZGVyaXZhdGlvblxuICAgICAgY29uc3QgcHdkID0gYXdhaXQgbmV3IFB3TW9kYWwodGhpcy5hcHAsIFwiRW50ZXIgWW91ciBQYXNzd29yZFwiLCBmYWxzZSkud2FpdCgpO1xuICAgICAgaWYgKHB3ZCkge1xuICAgICAgICAvLyBWZXJpZnkgYWdhaW5zdCBzdG9yZWQgaGFzaFxuICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVyLmVuY29kZShwd2QpO1xuICAgICAgICBjb25zdCBoYXNoQnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCBkYXRhKTtcbiAgICAgICAgY29uc3QgaGFzaEFycmF5ID0gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShoYXNoQnVmZmVyKSk7XG4gICAgICAgIGNvbnN0IGhhc2hIZXggPSBoYXNoQXJyYXkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoaGFzaEhleCA9PT0gdGhpcy5wbHVnaW4uc2V0dGluZ3Muc3RvcmVkUGFzc3dvcmQpIHtcbiAgICAgICAgICB0aGlzLmNhY2hlZFBhc3N3b3JkID0gcHdkO1xuICAgICAgICAgIHJldHVybiBwd2Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3IE5vdGljZShcIkluY29ycmVjdCBwYXNzd29yZFwiKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIFxuICAgIC8vIFNob3cgcGFzc3dvcmQgbW9kYWxcbiAgICBjb25zdCB0aXRsZSA9IGlzRW5jcnlwdCA/IFwiRW5jcnlwdCBTZW5zaXRpdmUgSW5mb3JtYXRpb25cIiA6IFwiRGVjcnlwdCBQcm90ZWN0ZWQgSW5mb3JtYXRpb25cIjtcbiAgICBjb25zdCBwd2QgPSBhd2FpdCBuZXcgUHdNb2RhbCh0aGlzLmFwcCwgdGl0bGUsIGlzRW5jcnlwdCkud2FpdCgpO1xuICAgIFxuICAgIGlmIChwd2QpIHtcbiAgICAgIHRoaXMuY2FjaGVkUGFzc3dvcmQgPSBwd2Q7XG4gICAgICBcbiAgICAgIC8vIElmIHRoaXMgaXMgZW5jcnlwdGlvbiBhbmQgbm8gcGFzc3dvcmQgaXMgc3RvcmVkLCBvZmZlciB0byBzYXZlIGl0XG4gICAgICBpZiAoaXNFbmNyeXB0ICYmICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5zdG9yZWRQYXNzd29yZCkge1xuICAgICAgICAvLyBBdXRvLXNhdmUgdGhlIHBhc3N3b3JkIGhhc2ggZm9yIGZ1dHVyZSB1c2VcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICBjb25zdCBkYXRhID0gZW5jb2Rlci5lbmNvZGUocHdkKTtcbiAgICAgICAgY29uc3QgaGFzaEJ1ZmZlciA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgZGF0YSk7XG4gICAgICAgIGNvbnN0IGhhc2hBcnJheSA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaEJ1ZmZlcikpO1xuICAgICAgICBjb25zdCBoYXNoSGV4ID0gaGFzaEFycmF5Lm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc3RvcmVkUGFzc3dvcmQgPSBoYXNoSGV4O1xuICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgbmV3IE5vdGljZShcIlBhc3N3b3JkIHNhdmVkIGZvciBmdXR1cmUgdXNlXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcHdkO1xuICB9XG4gIFxuICAvKiAtLS0tLS0tLSBDbGVhciBjYWNoZWQgcGFzc3dvcmQgLS0tLS0tLS0gKi9cbiAgcHJpdmF0ZSBjbGVhckNhY2hlZFBhc3N3b3JkKCkge1xuICAgIHRoaXMuY2FjaGVkUGFzc3dvcmQgPSBudWxsO1xuICB9XG5cbiAgLyogLS0tLS0tLS0gRW5jcnlwdCAoTG9jaykgLS0tLS0tLS0gKi9cbiAgcHJpdmF0ZSBhc3luYyBsb2NrKCl7XG4gICAgLy8gR2V0IGN1cnJlbnQgcmVzdWx0cyBiYXNlZCBvbiBtb2RlXG4gICAgY29uc3QgY3VycmVudFJlc3VsdHMgPSB0aGlzLmN1cnJlbnRNb2RlID09PSAnc2NhbicgPyB0aGlzLm1hdGNoZXMgOiB0aGlzLnNlYXJjaFJlc3VsdHM7XG4gICAgXG4gICAgLy8gSWYgbm90aGluZyBleHBsaWNpdGx5IHNlbGVjdGVkLCBzZWxlY3QgYWxsIGN1cnJlbnQgcmVzdWx0c1xuICAgIGlmKCF0aGlzLnNlbGVjdGVkLnNpemUpe1xuICAgICAgY3VycmVudFJlc3VsdHMuZm9yRWFjaCgoXyxpKT0+dGhpcy5zZWxlY3RlZC5hZGQoaSkpO1xuICAgIH1cbiAgICBcbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGFueXRoaW5nIHRvIGVuY3J5cHQgKGVpdGhlciBzZWxlY3Rpb25zIG9yIG1hbnVhbCBzZWxlY3Rpb25zKVxuICAgIGlmKCF0aGlzLnNlbGVjdGVkLnNpemUgJiYgIXRoaXMubWFudWFsU2VsZWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgIG5ldyBOb3RpY2UoXCJObyBpdGVtcyBzZWxlY3RlZCBmb3IgZW5jcnlwdGlvblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgLy8gR2V0IHBhc3N3b3JkICh3aXRoIGNhY2hpbmcvc3RvcmFnZSBsb2dpYylcbiAgICBjb25zdCBwd2QgPSBhd2FpdCB0aGlzLmdldFBhc3N3b3JkKHRydWUpO1xuICAgIGlmKCFwd2QpIHJldHVybjtcblxuICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBpdGVtcyB0byBlbmNyeXB0XG4gICAgY29uc3QgdG90YWxJdGVtcyA9IHRoaXMuc2VsZWN0ZWQuc2l6ZSArIHRoaXMubWFudWFsU2VsZWN0aW9ucy5sZW5ndGg7XG4gICAgXG4gICAgLy8gU2hvdyBwcm9ncmVzcyBpbmRpY2F0b3JcbiAgICBjb25zdCBzdGF0dXNCYXIgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiZGl2XCIsIHtcbiAgICAgIGNsczogXCJwaWktc3RhdHVzXCIsXG4gICAgICB0ZXh0OiBgRW5jcnlwdGluZyAke3RvdGFsSXRlbXN9IGl0ZW0ocykuLi5gXG4gICAgfSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGxldCBwcm9jZXNzZWRDb3VudCA9IDA7XG4gICAgICBcbiAgICAgIC8vIFByb2Nlc3MgZWFjaCBzZWxlY3RlZCBpdGVtIGZyb20gc2Nhbi9zZWFyY2ggcmVzdWx0c1xuICAgICAgZm9yKGNvbnN0IGkgb2YgdGhpcy5zZWxlY3RlZCl7XG4gICAgICAgIGNvbnN0IG0gPSBjdXJyZW50UmVzdWx0c1tpXTtcbiAgICAgICAgY29uc3QgZmlsZSA9IG0uZmlsZTtcbiAgICAgICAgbGV0IHRleHQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuXG4gICAgICAgIC8vIEVuY3J5cHQgdGhlIHRleHRcbiAgICAgICAgY29uc3QgY2lwaGVyID0gYXdhaXQgZW5jcnlwdChtLnRleHQsIHB3ZCk7XG4gICAgICAgIGNvbnN0IHdyYXBwZWQgPSBgPGRldGFpbHM+XFxuIDxzdW1tYXJ5PkxvY2s8L3N1bW1hcnk+XFxuIFx1MDBBN0VOQ18ke21ha2VVVUlEKCkuc2xpY2UoMCw2KX1fJHtjaXBoZXJ9XHUwMEE3XFxuPC9kZXRhaWxzPmA7XG4gICAgICAgIFxuICAgICAgICAvLyBSZXBsYWNlIHRoZSBvcmlnaW5hbCB0ZXh0IHdpdGggZW5jcnlwdGVkIHZlcnNpb25cbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShtLnRleHQsIHdyYXBwZWQpO1xuICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5tb2RpZnkoZmlsZSwgdGV4dCk7XG4gICAgICAgIHByb2Nlc3NlZENvdW50Kys7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFByb2Nlc3MgbWFudWFsIHNlbGVjdGlvbnNcbiAgICAgIGZvciAoY29uc3Qgc2VsZWN0aW9uIG9mIHRoaXMubWFudWFsU2VsZWN0aW9ucykge1xuICAgICAgICBhd2FpdCB0aGlzLmVuY3J5cHRNYW51YWxTZWxlY3Rpb24oc2VsZWN0aW9uLnRleHQsIHB3ZCk7XG4gICAgICAgIHByb2Nlc3NlZENvdW50Kys7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNob3cgc3VjY2VzcyBtZXNzYWdlXG4gICAgICBuZXcgTm90aWNlKGBTdWNjZXNzZnVsbHkgZW5jcnlwdGVkICR7cHJvY2Vzc2VkQ291bnR9IGl0ZW0ocylgKTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYXIgdGhlIHJlc3VsdHMgYW5kIHNlbGVjdGlvbnNcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRNb2RlID09PSAnc2NhbicpIHtcbiAgICAgICAgdGhpcy5tYXRjaGVzID0gW107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlYXJjaFJlc3VsdHMgPSBbXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VsZWN0ZWQuY2xlYXIoKTtcbiAgICAgIHRoaXMubWFudWFsU2VsZWN0aW9ucyA9IFtdO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVuY3J5cHRpb24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgIG5ldyBOb3RpY2UoXCJFcnJvciBkdXJpbmcgZW5jcnlwdGlvbi4gUGxlYXNlIHRyeSBhZ2Fpbi5cIik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgc3RhdHVzIGJhclxuICAgICAgaWYgKHN0YXR1c0JhciAmJiBzdGF0dXNCYXIucGFyZW50Tm9kZSkge1xuICAgICAgICBzdGF0dXNCYXIucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogLS0tLS0tLS0gRGVjcnlwdCAoVW5sb2NrKSAtLS0tLS0tLSAqL1xuICBwcml2YXRlIGFzeW5jIHVubG9jaygpe1xuICAgIC8vIEdldCBwYXNzd29yZCAod2l0aCBjYWNoaW5nL3N0b3JhZ2UgbG9naWMpXG4gICAgY29uc3QgcHdkID0gYXdhaXQgdGhpcy5nZXRQYXNzd29yZChmYWxzZSk7XG4gICAgaWYoIXB3ZCkgcmV0dXJuO1xuXG4gICAgLy8gUGF0dGVybiB0byBtYXRjaCBlbmNyeXB0ZWQgY29udGVudCB3aXRoaW4gZGV0YWlscyBlbGVtZW50c1xuICAgIGNvbnN0IGVuY1JlZ2V4ID0gLzxkZXRhaWxzPlxccyo8c3VtbWFyeT5Mb2NrPFxcL3N1bW1hcnk+XFxzKlx1MDBBN0VOQ19bQS1aYS16MC05XXs2fV8oLio/KVx1MDBBN1xccyo8XFwvZGV0YWlscz4vZztcblxuICAgIC8vIFNob3cgcHJvZ3Jlc3MgaW5kaWNhdG9yXG4gICAgY29uc3Qgc3RhdHVzQmFyID0gdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImRpdlwiLCB7XG4gICAgICBjbHM6IFwicGlpLXN0YXR1c1wiLFxuICAgICAgdGV4dDogXCJTZWFyY2hpbmcgZm9yIGVuY3J5cHRlZCBjb250ZW50Li4uXCJcbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICBsZXQgdW5sb2NrZWQgPSAwO1xuICAgICAgbGV0IGZpbGVzUHJvY2Vzc2VkID0gMDtcbiAgICAgIGNvbnN0IHRvdGFsRmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkubGVuZ3RoO1xuICAgICAgXG4gICAgICAvLyBQcm9jZXNzIGVhY2ggbWFya2Rvd24gZmlsZVxuICAgICAgZm9yKGNvbnN0IGYgb2YgdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpKXtcbiAgICAgICAgZmlsZXNQcm9jZXNzZWQrKztcbiAgICAgICAgXG4gICAgICAgIC8vIFVwZGF0ZSBwcm9ncmVzcyBpbmRpY2F0b3JcbiAgICAgICAgc3RhdHVzQmFyLnRleHRDb250ZW50ID0gYFByb2Nlc3NpbmcgZmlsZXMuLi4gKCR7ZmlsZXNQcm9jZXNzZWR9LyR7dG90YWxGaWxlc30pYDtcbiAgICAgICAgXG4gICAgICAgIGxldCB0eHQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGYpO1xuICAgICAgICBcbiAgICAgICAgLy8gRmluZCBhbGwgZW5jcnlwdGVkIG1hdGNoZXNcbiAgICAgICAgY29uc3QgbWF0Y2hlczoge2Z1bGw6IHN0cmluZywgY2lwaGVyOiBzdHJpbmd9W10gPSBbXTtcbiAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICB3aGlsZSAoKG1hdGNoID0gZW5jUmVnZXguZXhlYyh0eHQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAgICAgICBmdWxsOiBtYXRjaFswXSxcbiAgICAgICAgICAgIGNpcGhlcjogbWF0Y2hbMV1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gSWYgbm8gbWF0Y2hlcywgc2tpcCB0byBuZXh0IGZpbGVcbiAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID09PSAwKSBjb250aW51ZTtcbiAgICAgICAgXG4gICAgICAgIC8vIFVwZGF0ZSBzdGF0dXMgdG8gc2hvdyBkZWNyeXB0aW9uIGluIHByb2dyZXNzXG4gICAgICAgIHN0YXR1c0Jhci50ZXh0Q29udGVudCA9IGBEZWNyeXB0aW5nIGNvbnRlbnQgaW4gJHtmLmJhc2VuYW1lfS4uLmA7XG4gICAgICAgIFxuICAgICAgICAvLyBEZWNyeXB0IGFsbCBtYXRjaGVzXG4gICAgICAgIGxldCBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgbSBvZiBtYXRjaGVzKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEF3YWl0IHRoZSBkZWNyeXB0aW9uIHByb21pc2VcbiAgICAgICAgICAgIGNvbnN0IHBsYWluID0gYXdhaXQgZGVjcnlwdChtLmNpcGhlciwgcHdkKTtcbiAgICAgICAgICAgIC8vIFJlcGxhY2UgdGhlIGVudGlyZSBkZXRhaWxzIGVsZW1lbnQgd2l0aCB0aGUgZGVjcnlwdGVkIHRleHRcbiAgICAgICAgICAgIHR4dCA9IHR4dC5yZXBsYWNlKG0uZnVsbCwgcGxhaW4pO1xuICAgICAgICAgICAgdW5sb2NrZWQrKztcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIElmIGRlY3J5cHRpb24gZmFpbHMsIGl0IG1pZ2h0IGJlIHdyb25nIHBhc3N3b3JkIC0gY2xlYXIgY2FjaGVcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJEZWNyeXB0aW9uIGZhaWxlZDpcIiwgZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5jYWNoZWRQYXNzd29yZCkge1xuICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2FjaGVkUGFzc3dvcmQoKTtcbiAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkRlY3J5cHRpb24gZmFpbGVkLiBQYXNzd29yZCBjYWNoZSBjbGVhcmVkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFNhdmUgY2hhbmdlcyBpZiBhbnkgZGVjcnlwdGlvbiB3YXMgc3VjY2Vzc2Z1bFxuICAgICAgICBpZihjaGFuZ2VkKSBhd2FpdCB0aGlzLmFwcC52YXVsdC5tb2RpZnkoZiwgdHh0KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gU2hvdyBzdWNjZXNzIG9yIG5vIG1hdGNoZXMgZm91bmQgbWVzc2FnZVxuICAgICAgaWYgKHVubG9ja2VkID4gMCkge1xuICAgICAgICBzdGF0dXNCYXIudGV4dENvbnRlbnQgPSBgU3VjY2Vzc2Z1bGx5IGRlY3J5cHRlZCAke3VubG9ja2VkfSBpdGVtKHMpYDtcbiAgICAgICAgc3RhdHVzQmFyLmFkZENsYXNzKFwicGlpLXN0YXR1cy1zdWNjZXNzXCIpO1xuICAgICAgICBuZXcgTm90aWNlKGBTdWNjZXNzZnVsbHkgZGVjcnlwdGVkICR7dW5sb2NrZWR9IGl0ZW0ocylgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXR1c0Jhci50ZXh0Q29udGVudCA9IFwiTm8gZW5jcnlwdGVkIGNvbnRlbnQgZm91bmQgb3IgaW5jb3JyZWN0IHBhc3N3b3JkXCI7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJObyBlbmNyeXB0ZWQgY29udGVudCBmb3VuZCBvciBpbmNvcnJlY3QgcGFzc3dvcmRcIik7XG4gICAgICAgIC8vIENsZWFyIGNhY2hlZCBwYXNzd29yZCBpZiBkZWNyeXB0aW9uIGZhaWxlZFxuICAgICAgICB0aGlzLmNsZWFyQ2FjaGVkUGFzc3dvcmQoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gS2VlcCBzdGF0dXMgdmlzaWJsZSBmb3IgYSBtb21lbnQsIHRoZW4gcmVtb3ZlXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHN0YXR1c0JhciAmJiBzdGF0dXNCYXIucGFyZW50Tm9kZSkge1xuICAgICAgICAgIHN0YXR1c0Jhci5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgU1RBVFVTX01FU1NBR0VfVElNRU9VVCk7XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkRlY3J5cHRpb24gZXJyb3I6XCIsIGVycm9yKTtcbiAgICAgIG5ldyBOb3RpY2UoXCJFcnJvciBkdXJpbmcgZGVjcnlwdGlvbi4gUGxlYXNlIHRyeSBhZ2Fpbi5cIik7XG4gICAgICBcbiAgICAgIGlmIChzdGF0dXNCYXIgJiYgc3RhdHVzQmFyLnBhcmVudE5vZGUpIHtcbiAgICAgICAgc3RhdHVzQmFyLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCB7IFBsdWdpbiwgV29ya3NwYWNlTGVhZiwgVmlldyB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgREVGQVVMVF9TRVRUSU5HUywgUGlpU2V0dGluZ3MsIFBpaVNldHRpbmdUYWIgfSBmcm9tIFwiLi9zcmMvc2V0dGluZ3NcIjtcbmltcG9ydCB7IHJlZ2lzdGVyQ29tbWFuZHMgfSBmcm9tIFwiLi9zcmMvY29tbWFuZHNcIjtcbmltcG9ydCB7IFZJRVdfVFlQRV9QSUksIFBpaVNpZGViYXJWaWV3IH0gZnJvbSBcIi4vdWkvUGlpU2lkZWJhclZpZXdcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGlpTG9ja1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIHNldHRpbmdzOiBQaWlTZXR0aW5ncztcblxuICAvKiBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgTGlmZWN5Y2xlIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAqL1xuICBhc3luYyBvbmxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuICAgIC8vIFJlZ2lzdGVyIHRoZSBzaWRlYmFyIHZpZXcgd2l0aCBwcm9wZXIgdHlwZSBjYXN0aW5nXG4gICAgdGhpcy5yZWdpc3RlclZpZXcoXG4gICAgICBWSUVXX1RZUEVfUElJLFxuICAgICAgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IChuZXcgUGlpU2lkZWJhclZpZXcobGVhZiwgdGhpcykgYXMgdW5rbm93bikgYXMgVmlld1xuICAgICk7XG5cbiAgICAvLyBzaGllbGQgaWNvbiBcdTIwMTMgc2lkZWJhciB0b2dnbGVcbiAgICB0aGlzLmFkZFJpYmJvbkljb24oXCJzaGllbGRcIiwgXCJMb2NrIGFuZCBGaW5kXCIsICgpID0+IHRoaXMuYWN0aXZhdGVTaWRlYmFyKCkpO1xuXG4gICAgLy8gc2V0dGluZ3MgdGFiICsgY29tbWFuZHNcbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IFBpaVNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcbiAgICByZWdpc3RlckNvbW1hbmRzKHRoaXMpO1xuICB9XG5cbiAgb251bmxvYWQoKSB7XG4gICAgdGhpcy5hcHAud29ya3NwYWNlLmRldGFjaExlYXZlc09mVHlwZShWSUVXX1RZUEVfUElJKTtcbiAgfVxuXG4gIC8qIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCBIZWxwZXJzIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAqL1xuICBwcml2YXRlIGFzeW5jIGFjdGl2YXRlU2lkZWJhcigpIHtcbiAgICAvLyBGb2N1cyBpZiBhbHJlYWR5IG9wZW4sIG90aGVyd2lzZSBjcmVhdGUgbmV3IGxlYWZcbiAgICBjb25zdCBsZWF2ZXMgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9QSUkpO1xuICAgIFxuICAgIGlmIChsZWF2ZXMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gSWYgYSBsZWFmIHdpdGggb3VyIHZpZXcgYWxyZWFkeSBleGlzdHMsIHJldmVhbCBpdFxuICAgICAgdGhpcy5hcHAud29ya3NwYWNlLnJldmVhbExlYWYobGVhdmVzWzBdKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgLy8gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBsZWFmIGluIHRoZSBsZWZ0IHNpZGViYXJcbiAgICBjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlZnRMZWFmKGZhbHNlKTtcbiAgICBhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7XG4gICAgICB0eXBlOiBWSUVXX1RZUEVfUElJLFxuICAgICAgYWN0aXZlOiB0cnVlLFxuICAgIH0pO1xuICAgIFxuICAgIHRoaXMuYXBwLndvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgY29uc3Qgc2F2ZWQgPSBhd2FpdCB0aGlzLmxvYWREYXRhKCk7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHsgLi4uREVGQVVMVF9TRVRUSU5HUywgLi4uc2F2ZWQgfTtcbiAgfVxuXG4gIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgICBBcHAsXG4gICAgUGx1Z2luU2V0dGluZ1RhYixcbiAgICBTZXR0aW5nLFxuICAgIE5vdGljZSxcbiAgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgaW1wb3J0IHR5cGUgUGlpTG9ja1BsdWdpbiBmcm9tIFwiLi4vbWFpblwiO1xuICBcbiAgLyogXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIFR5cGUgYW5kIERlZmF1bHQgVmFsdWUgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGF0dGVybldpdGhNZXRhZGF0YSB7XG4gICAgcGF0dGVybjogc3RyaW5nO1xuICAgIHNvdXJjZTogc3RyaW5nOyAvLyAndXNlcicgb3IgY291bnRyeSBjb2RlIGxpa2UgJ1VTJywgJ0tvcmVhJ1xuICAgIGRpc3BsYXlOYW1lOiBzdHJpbmc7IC8vICdVc2VyIFBhdHRlcm4gMScgb3IgJ1VuaXRlZCBTdGF0ZXMgLSBTU04nXG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFBpaVNldHRpbmdzIHtcbiAgICBwYXR0ZXJuczogc3RyaW5nW107ICAgICAgICAgIC8vIFJlZ2V4IGxpc3RzIChmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSlcbiAgICBwYXR0ZXJuTWV0YWRhdGE6IFBhdHRlcm5XaXRoTWV0YWRhdGFbXTsgLy8gRW5oYW5jZWQgcGF0dGVybiB0cmFja2luZ1xuICAgIGVuY3J5cHRBbGdvOiBcIkFFUy1HQ01cIjsgICAgICAvLyBQcmVwYXJlIGZvciBmdXR1cmUgZXhwYW5zaW9uIG9mIG9wdGlvbnNcbiAgICBzdG9yZWRQYXNzd29yZD86IHN0cmluZzsgICAgIC8vIFRlbXBvcmFyaWx5IHN0b3JlZCBwYXNzd29yZCAoaGFzaGVkKVxuICAgIGRlZmF1bHRQYXR0ZXJuczogc3RyaW5nOyAgICAgLy8gSU5JIGZvcm1hdCBzdHJpbmcgd2l0aCBjb3VudHJ5LXNwZWNpZmljIHBhdHRlcm5zXG4gICAgc2VsZWN0ZWRDb3VudHJpZXM6IHN0cmluZ1tdOyAvLyBMaXN0IG9mIHNlbGVjdGVkIGNvdW50cmllc1xuICB9XG4gIFxuICBleHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUGlpU2V0dGluZ3MgPSB7XG4gICAgcGF0dGVybnM6IFtcIlxcXFxkezZ9LVxcXFxkezd9XCIsIFwiXFxcXGR7M30tXFxcXGR7NH0tXFxcXGR7NH1cIl0sIC8vIFNvY2lhbCBTZWN1cml0eSBOdW1iZXItUGhvbmUgTnVtYmVyIEV4YW1wbGVcbiAgICBwYXR0ZXJuTWV0YWRhdGE6IFtcbiAgICAgIHsgcGF0dGVybjogXCJcXFxcZHs2fS1cXFxcZHs3fVwiLCBzb3VyY2U6IFwidXNlclwiLCBkaXNwbGF5TmFtZTogXCJVc2VyIFBhdHRlcm4gMVwiIH0sXG4gICAgICB7IHBhdHRlcm46IFwiXFxcXGR7M30tXFxcXGR7NH0tXFxcXGR7NH1cIiwgc291cmNlOiBcInVzZXJcIiwgZGlzcGxheU5hbWU6IFwiVXNlciBQYXR0ZXJuIDJcIiB9XG4gICAgXSxcbiAgICBlbmNyeXB0QWxnbzogXCJBRVMtR0NNXCIsXG4gICAgc3RvcmVkUGFzc3dvcmQ6IHVuZGVmaW5lZCxcbiAgICBkZWZhdWx0UGF0dGVybnM6IFwiXCIsIC8vIFdpbGwgYmUgbG9hZGVkIGZyb20gZXh0ZXJuYWwgZmlsZVxuICAgIHNlbGVjdGVkQ291bnRyaWVzOiBbXSwgLy8gTm8gY291bnRyaWVzIHNlbGVjdGVkIGJ5IGRlZmF1bHRcbiAgfTtcblxuICAvKiBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgRGVmYXVsdCBQYXR0ZXJucyBVdGlsaXRpZXMgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ291bnRyeVBhdHRlcm4ge1xuICAgIGRpc3BsYXlOYW1lOiBzdHJpbmc7IC8vIEh1bWFuIHJlYWRhYmxlIG5hbWUgbGlrZSBcIlVuaXRlZCBTdGF0ZXNcIlxuICAgIG5hbWU6IHN0cmluZzsgICAgICAgIC8vIFJlZ2V4IHBhdHRlcm4gZm9yIHBlcnNvbiBuYW1lc1xuICAgIGFkZHJlc3M6IHN0cmluZzsgICAgIC8vIFJlZ2V4IHBhdHRlcm4gZm9yIGFkZHJlc3Nlcy9JRHNcbiAgICBwaG9uZTogc3RyaW5nOyAgICAgICAvLyBSZWdleCBwYXR0ZXJuIGZvciBwaG9uZSBudW1iZXJzXG4gIH1cblxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZERlZmF1bHRQYXR0ZXJuc0Zyb21GaWxlKHBsdWdpbjogUGlpTG9ja1BsdWdpbik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFkYXB0ZXIgPSBwbHVnaW4uYXBwLnZhdWx0LmFkYXB0ZXI7XG4gICAgICBjb25zdCBwbHVnaW5EaXIgPSBwbHVnaW4ubWFuaWZlc3QuZGlyIHx8ICcnO1xuICAgICAgY29uc3QgZmlsZVBhdGggPSBgJHtwbHVnaW5EaXJ9L2RlZmF1bHQtcGF0dGVybnMuaW5pYDtcbiAgICAgIFxuICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IGFkYXB0ZXIucmVhZChmaWxlUGF0aCk7XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgbG9hZCBkZWZhdWx0LXBhdHRlcm5zLmluaSwgdXNpbmcgZW1wdHkgcGF0dGVybnM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBwYXJzZURlZmF1bHRQYXR0ZXJucyhpbmlTdHJpbmc6IHN0cmluZyk6IFJlY29yZDxzdHJpbmcsIENvdW50cnlQYXR0ZXJuPiB7XG4gICAgY29uc3QgcmVzdWx0OiBSZWNvcmQ8c3RyaW5nLCBDb3VudHJ5UGF0dGVybj4gPSB7fTtcbiAgICBjb25zdCBsaW5lcyA9IGluaVN0cmluZy5zcGxpdCgnXFxuJyk7XG4gICAgbGV0IGN1cnJlbnRTZWN0aW9uID0gJyc7XG5cbiAgICAvLyBDb3VudHJ5IGRpc3BsYXkgbmFtZSBtYXBwaW5nXG4gICAgY29uc3QgY291bnRyeURpc3BsYXlOYW1lczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICdVUyc6ICdVbml0ZWQgU3RhdGVzJyxcbiAgICAgICdLb3JlYSc6ICdTb3V0aCBLb3JlYScsXG4gICAgICAnSmFwYW4nOiAnSmFwYW4nLFxuICAgICAgJ1RhaXdhbic6ICdUYWl3YW4nLFxuICAgICAgJ0luZGlhJzogJ0luZGlhJyxcbiAgICAgICdOb25lJzogJ05vIERlZmF1bHQgUGF0dGVybidcbiAgICB9O1xuXG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICBjb25zdCB0cmltbWVkID0gbGluZS50cmltKCk7XG4gICAgICBpZiAoIXRyaW1tZWQpIGNvbnRpbnVlO1xuXG4gICAgICBpZiAodHJpbW1lZC5zdGFydHNXaXRoKCdbJykgJiYgdHJpbW1lZC5lbmRzV2l0aCgnXScpKSB7XG4gICAgICAgIGN1cnJlbnRTZWN0aW9uID0gdHJpbW1lZC5zbGljZSgxLCAtMSk7XG4gICAgICAgIHJlc3VsdFtjdXJyZW50U2VjdGlvbl0gPSB7IFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiBjb3VudHJ5RGlzcGxheU5hbWVzW2N1cnJlbnRTZWN0aW9uXSB8fCBjdXJyZW50U2VjdGlvbixcbiAgICAgICAgICBuYW1lOiAnJywgXG4gICAgICAgICAgYWRkcmVzczogJycsXG4gICAgICAgICAgcGhvbmU6ICcnXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRTZWN0aW9uICYmIHRyaW1tZWQuaW5jbHVkZXMoJz0nKSkge1xuICAgICAgICBjb25zdCBba2V5LCAuLi52YWx1ZVBhcnRzXSA9IHRyaW1tZWQuc3BsaXQoJz0nKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZVBhcnRzLmpvaW4oJz0nKTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ25hbWUnKSB7XG4gICAgICAgICAgcmVzdWx0W2N1cnJlbnRTZWN0aW9uXS5uYW1lID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnYWRkcmVzcycpIHtcbiAgICAgICAgICByZXN1bHRbY3VycmVudFNlY3Rpb25dLmFkZHJlc3MgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdwaG9uZScpIHtcbiAgICAgICAgICByZXN1bHRbY3VycmVudFNlY3Rpb25dLnBob25lID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZURlZmF1bHRQYXR0ZXJucyhwYXR0ZXJuczogUmVjb3JkPHN0cmluZywgQ291bnRyeVBhdHRlcm4+KTogc3RyaW5nIHtcbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgZm9yIChjb25zdCBbY291bnRyeSwgcGF0dGVybl0gb2YgT2JqZWN0LmVudHJpZXMocGF0dGVybnMpKSB7XG4gICAgICByZXN1bHQgKz0gYFske2NvdW50cnl9XVxcbmA7XG4gICAgICByZXN1bHQgKz0gYG5hbWU9JHtwYXR0ZXJuLm5hbWV9XFxuYDtcbiAgICAgIHJlc3VsdCArPSBgYWRkcmVzcz0ke3BhdHRlcm4uYWRkcmVzc31cXG5gO1xuICAgICAgcmVzdWx0ICs9IGBwaG9uZT0ke3BhdHRlcm4ucGhvbmV9XFxuYDtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhwYXR0ZXJucykuaW5kZXhPZihjb3VudHJ5KSA8IE9iamVjdC5rZXlzKHBhdHRlcm5zKS5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJlc3VsdCArPSAnXFxuJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlRGVmYXVsdFBhdHRlcm5zVG9GaWxlKHBsdWdpbjogUGlpTG9ja1BsdWdpbiwgY29udGVudDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFkYXB0ZXIgPSBwbHVnaW4uYXBwLnZhdWx0LmFkYXB0ZXI7XG4gICAgICBjb25zdCBwbHVnaW5EaXIgPSBwbHVnaW4ubWFuaWZlc3QuZGlyIHx8ICcnO1xuICAgICAgY29uc3QgZmlsZVBhdGggPSBgJHtwbHVnaW5EaXJ9L2RlZmF1bHQtcGF0dGVybnMuaW5pYDtcbiAgICAgIFxuICAgICAgYXdhaXQgYWRhcHRlci53cml0ZShmaWxlUGF0aCwgY29udGVudCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvdWxkIG5vdCBzYXZlIGRlZmF1bHQtcGF0dGVybnMuaW5pOicsIGVycm9yKTtcbiAgICAgIG5ldyBOb3RpY2UoJ0ZhaWxlZCB0byBzYXZlIGRlZmF1bHQgcGF0dGVybnMgZmlsZScpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRQYXR0ZXJuc0Zyb21TZWxlY3RlZENvdW50cmllcyhzZWxlY3RlZENvdW50cmllczogc3RyaW5nW10sIGRlZmF1bHRQYXR0ZXJuczogUmVjb3JkPHN0cmluZywgQ291bnRyeVBhdHRlcm4+KTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHBhdHRlcm5zOiBzdHJpbmdbXSA9IFtdO1xuICAgIFxuICAgIGZvciAoY29uc3QgY291bnRyeSBvZiBzZWxlY3RlZENvdW50cmllcykge1xuICAgICAgY29uc3QgY291bnRyeVBhdHRlcm4gPSBkZWZhdWx0UGF0dGVybnNbY291bnRyeV07XG4gICAgICBpZiAoY291bnRyeVBhdHRlcm4pIHtcbiAgICAgICAgLy8gQWRkIG5hbWUgcGF0dGVybnNcbiAgICAgICAgaWYgKGNvdW50cnlQYXR0ZXJuLm5hbWUpIHtcbiAgICAgICAgICBjb25zdCBuYW1lUGF0dGVybnMgPSBjb3VudHJ5UGF0dGVybi5uYW1lLnNwbGl0KCd8JykuZmlsdGVyKHAgPT4gcC50cmltKCkpO1xuICAgICAgICAgIHBhdHRlcm5zLnB1c2goLi4ubmFtZVBhdHRlcm5zKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgYWRkcmVzcyBwYXR0ZXJuc1xuICAgICAgICBpZiAoY291bnRyeVBhdHRlcm4uYWRkcmVzcykge1xuICAgICAgICAgIGNvbnN0IGFkZHJlc3NQYXR0ZXJucyA9IGNvdW50cnlQYXR0ZXJuLmFkZHJlc3Muc3BsaXQoJ3wnKS5maWx0ZXIocCA9PiBwLnRyaW0oKSk7XG4gICAgICAgICAgcGF0dGVybnMucHVzaCguLi5hZGRyZXNzUGF0dGVybnMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCBwaG9uZSBwYXR0ZXJuc1xuICAgICAgICBpZiAoY291bnRyeVBhdHRlcm4ucGhvbmUpIHtcbiAgICAgICAgICBjb25zdCBwaG9uZVBhdHRlcm5zID0gY291bnRyeVBhdHRlcm4ucGhvbmUuc3BsaXQoJ3wnKS5maWx0ZXIocCA9PiBwLnRyaW0oKSk7XG4gICAgICAgICAgcGF0dGVybnMucHVzaCguLi5waG9uZVBhdHRlcm5zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcGF0dGVybnM7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gc3luY1BhdHRlcm5NZXRhZGF0YShwbHVnaW46IFBpaUxvY2tQbHVnaW4sIGRlZmF1bHRQYXR0ZXJuczogUmVjb3JkPHN0cmluZywgQ291bnRyeVBhdHRlcm4+KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBtZXRhZGF0YSBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAgaWYgKCFwbHVnaW4uc2V0dGluZ3MucGF0dGVybk1ldGFkYXRhKSB7XG4gICAgICBwbHVnaW4uc2V0dGluZ3MucGF0dGVybk1ldGFkYXRhID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgbmV3TWV0YWRhdGE6IFBhdHRlcm5XaXRoTWV0YWRhdGFbXSA9IFtdO1xuICAgIGxldCB1c2VyUGF0dGVybkNvdW50ID0gMTtcblxuICAgIC8vIFByb2Nlc3MgZWFjaCBwYXR0ZXJuIGluIHRoZSBwYXR0ZXJucyBhcnJheVxuICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBwbHVnaW4uc2V0dGluZ3MucGF0dGVybnMpIHtcbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiBpdCdzIGZyb20gYSBzZWxlY3RlZCBjb3VudHJ5XG4gICAgICBmb3IgKGNvbnN0IGNvdW50cnkgb2YgcGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkQ291bnRyaWVzKSB7XG4gICAgICAgIGNvbnN0IGNvdW50cnlQYXR0ZXJuID0gZGVmYXVsdFBhdHRlcm5zW2NvdW50cnldO1xuICAgICAgICBpZiAoY291bnRyeVBhdHRlcm4pIHtcbiAgICAgICAgICAvLyBDaGVjayBuYW1lIHBhdHRlcm5zXG4gICAgICAgICAgaWYgKGNvdW50cnlQYXR0ZXJuLm5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVQYXR0ZXJucyA9IGNvdW50cnlQYXR0ZXJuLm5hbWUuc3BsaXQoJ3wnKS5maWx0ZXIocCA9PiBwLnRyaW0oKSk7XG4gICAgICAgICAgICBpZiAobmFtZVBhdHRlcm5zLmluY2x1ZGVzKHBhdHRlcm4pKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBhdHRlcm5JbmRleCA9IG5hbWVQYXR0ZXJucy5pbmRleE9mKHBhdHRlcm4pICsgMTtcbiAgICAgICAgICAgICAgbmV3TWV0YWRhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgcGF0dGVybixcbiAgICAgICAgICAgICAgICBzb3VyY2U6IGNvdW50cnksXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IGAke2NvdW50cnl9IE5hbWUgJHtwYXR0ZXJuSW5kZXh9YFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ2hlY2sgYWRkcmVzcyBwYXR0ZXJuc1xuICAgICAgICAgIGlmICghZm91bmQgJiYgY291bnRyeVBhdHRlcm4uYWRkcmVzcykge1xuICAgICAgICAgICAgY29uc3QgYWRkcmVzc1BhdHRlcm5zID0gY291bnRyeVBhdHRlcm4uYWRkcmVzcy5zcGxpdCgnfCcpLmZpbHRlcihwID0+IHAudHJpbSgpKTtcbiAgICAgICAgICAgIGlmIChhZGRyZXNzUGF0dGVybnMuaW5jbHVkZXMocGF0dGVybikpIHtcbiAgICAgICAgICAgICAgY29uc3QgcGF0dGVybkluZGV4ID0gYWRkcmVzc1BhdHRlcm5zLmluZGV4T2YocGF0dGVybikgKyAxO1xuICAgICAgICAgICAgICBuZXdNZXRhZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogY291bnRyeSxcbiAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogYCR7Y291bnRyeX0gQWRkcmVzcyAke3BhdHRlcm5JbmRleH1gXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBDaGVjayBwaG9uZSBwYXR0ZXJuc1xuICAgICAgICAgIGlmICghZm91bmQgJiYgY291bnRyeVBhdHRlcm4ucGhvbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IHBob25lUGF0dGVybnMgPSBjb3VudHJ5UGF0dGVybi5waG9uZS5zcGxpdCgnfCcpLmZpbHRlcihwID0+IHAudHJpbSgpKTtcbiAgICAgICAgICAgIGlmIChwaG9uZVBhdHRlcm5zLmluY2x1ZGVzKHBhdHRlcm4pKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBhdHRlcm5JbmRleCA9IHBob25lUGF0dGVybnMuaW5kZXhPZihwYXR0ZXJuKSArIDE7XG4gICAgICAgICAgICAgIG5ld01ldGFkYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgIHBhdHRlcm4sXG4gICAgICAgICAgICAgICAgc291cmNlOiBjb3VudHJ5LFxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBgJHtjb3VudHJ5fSBQaG9uZSAke3BhdHRlcm5JbmRleH1gXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBJZiBub3QgZnJvbSBhIGNvdW50cnksIGl0J3MgYSB1c2VyIHBhdHRlcm5cbiAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgbmV3TWV0YWRhdGEucHVzaCh7XG4gICAgICAgICAgcGF0dGVybixcbiAgICAgICAgICBzb3VyY2U6IFwidXNlclwiLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiBgVXNlciBQYXR0ZXJuICR7dXNlclBhdHRlcm5Db3VudH1gXG4gICAgICAgIH0pO1xuICAgICAgICB1c2VyUGF0dGVybkNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGx1Z2luLnNldHRpbmdzLnBhdHRlcm5NZXRhZGF0YSA9IG5ld01ldGFkYXRhO1xuICB9XG5cbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBhdHRlcm5JbklOSShwbHVnaW46IFBpaUxvY2tQbHVnaW4sIG9sZFBhdHRlcm46IHN0cmluZywgbmV3UGF0dGVybjogc3RyaW5nLCBzb3VyY2U6IHN0cmluZywgZGVmYXVsdFBhdHRlcm5zOiBSZWNvcmQ8c3RyaW5nLCBDb3VudHJ5UGF0dGVybj4pIHtcbiAgICBpZiAoc291cmNlICE9PSAndXNlcicpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBjb3VudHJ5IHBhdHRlcm4sIHVwZGF0ZSB0aGUgSU5JIGZpbGVcbiAgICAgIGNvbnN0IGNvdW50cnlQYXR0ZXJuID0gZGVmYXVsdFBhdHRlcm5zW3NvdXJjZV07XG4gICAgICBpZiAoY291bnRyeVBhdHRlcm4pIHtcbiAgICAgICAgbGV0IHVwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIGlmIGl0J3MgYSBuYW1lIHBhdHRlcm5cbiAgICAgICAgaWYgKGNvdW50cnlQYXR0ZXJuLm5hbWUpIHtcbiAgICAgICAgICBjb25zdCBuYW1lUGF0dGVybnMgPSBjb3VudHJ5UGF0dGVybi5uYW1lLnNwbGl0KCd8JykuZmlsdGVyKHAgPT4gcC50cmltKCkpO1xuICAgICAgICAgIGNvbnN0IG5hbWVJbmRleCA9IG5hbWVQYXR0ZXJucy5pbmRleE9mKG9sZFBhdHRlcm4pO1xuICAgICAgICAgIGlmIChuYW1lSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBuYW1lUGF0dGVybnNbbmFtZUluZGV4XSA9IG5ld1BhdHRlcm47XG4gICAgICAgICAgICBjb3VudHJ5UGF0dGVybi5uYW1lID0gbmFtZVBhdHRlcm5zLmpvaW4oJ3wnKTtcbiAgICAgICAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQncyBhbiBhZGRyZXNzIHBhdHRlcm5cbiAgICAgICAgaWYgKCF1cGRhdGVkICYmIGNvdW50cnlQYXR0ZXJuLmFkZHJlc3MpIHtcbiAgICAgICAgICBjb25zdCBhZGRyZXNzUGF0dGVybnMgPSBjb3VudHJ5UGF0dGVybi5hZGRyZXNzLnNwbGl0KCd8JykuZmlsdGVyKHAgPT4gcC50cmltKCkpO1xuICAgICAgICAgIGNvbnN0IGFkZHJlc3NJbmRleCA9IGFkZHJlc3NQYXR0ZXJucy5pbmRleE9mKG9sZFBhdHRlcm4pO1xuICAgICAgICAgIGlmIChhZGRyZXNzSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBhZGRyZXNzUGF0dGVybnNbYWRkcmVzc0luZGV4XSA9IG5ld1BhdHRlcm47XG4gICAgICAgICAgICBjb3VudHJ5UGF0dGVybi5hZGRyZXNzID0gYWRkcmVzc1BhdHRlcm5zLmpvaW4oJ3wnKTtcbiAgICAgICAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQncyBhIHBob25lIHBhdHRlcm5cbiAgICAgICAgaWYgKCF1cGRhdGVkICYmIGNvdW50cnlQYXR0ZXJuLnBob25lKSB7XG4gICAgICAgICAgY29uc3QgcGhvbmVQYXR0ZXJucyA9IGNvdW50cnlQYXR0ZXJuLnBob25lLnNwbGl0KCd8JykuZmlsdGVyKHAgPT4gcC50cmltKCkpO1xuICAgICAgICAgIGNvbnN0IHBob25lSW5kZXggPSBwaG9uZVBhdHRlcm5zLmluZGV4T2Yob2xkUGF0dGVybik7XG4gICAgICAgICAgaWYgKHBob25lSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBwaG9uZVBhdHRlcm5zW3Bob25lSW5kZXhdID0gbmV3UGF0dGVybjtcbiAgICAgICAgICAgIGNvdW50cnlQYXR0ZXJuLnBob25lID0gcGhvbmVQYXR0ZXJucy5qb2luKCd8Jyk7XG4gICAgICAgICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh1cGRhdGVkKSB7XG4gICAgICAgICAgLy8gU2F2ZSBiYWNrIHRvIElOSSBmaWxlXG4gICAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZURlZmF1bHRQYXR0ZXJucyhkZWZhdWx0UGF0dGVybnMpO1xuICAgICAgICAgIGF3YWl0IHNhdmVEZWZhdWx0UGF0dGVybnNUb0ZpbGUocGx1Z2luLCBzZXJpYWxpemVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBcbiAgLyogXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIFNldHRpbmcgVGFiIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCAqL1xuICBleHBvcnQgY2xhc3MgUGlpU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIHBsdWdpbjogUGlpTG9ja1BsdWdpbjtcbiAgXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogUGlpTG9ja1BsdWdpbikge1xuICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuICBcbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZVBhc3N3b3JkQ2hhbmdlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHsgUHdNb2RhbCB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vdWkvUGlpU2lkZWJhclZpZXdcIik7XG4gICAgY29uc3QgbW9kYWwgPSBuZXcgUHdNb2RhbCh0aGlzLmFwcCwgXCJTZXQgRW5jcnlwdGlvbiBQYXNzd29yZFwiLCB0cnVlKTtcbiAgICBjb25zdCBwYXNzd29yZCA9IGF3YWl0IG1vZGFsLndhaXQoKTtcbiAgICBcbiAgICBpZiAocGFzc3dvcmQpIHtcbiAgICAgIC8vIFNpbXBsZSBoYXNoIGZvciBzdG9yYWdlIChpbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHVzZSBwcm9wZXIga2V5IGRlcml2YXRpb24pXG4gICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICBjb25zdCBkYXRhID0gZW5jb2Rlci5lbmNvZGUocGFzc3dvcmQpO1xuICAgICAgY29uc3QgaGFzaEJ1ZmZlciA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgZGF0YSk7XG4gICAgICBjb25zdCBoYXNoQXJyYXkgPSBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGhhc2hCdWZmZXIpKTtcbiAgICAgIGNvbnN0IGhhc2hIZXggPSBoYXNoQXJyYXkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XG4gICAgICBcbiAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnN0b3JlZFBhc3N3b3JkID0gaGFzaEhleDtcbiAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgbmV3IE5vdGljZShcIlBhc3N3b3JkIHNhdmVkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICB9XG4gIH1cblxuICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICBcbiAgICAgIHRoaXMucmVuZGVyQ29udGVudCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZW5kZXJDb250ZW50KCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgIGNvbnRhaW5lckVsLmFkZENsYXNzKCdwaWktc2V0dGluZ3MtY29udGFpbmVyJyk7XG5cbiAgICAgIC8vIENyZWF0ZSBjb2xsYXBzaWJsZSBNYW5hZ2UgUGF0dGVybnMgc2VjdGlvblxuICAgICAgY29uc3QgcGF0dGVybnNIZWFkZXIgPSBjb250YWluZXJFbC5jcmVhdGVFbChcImRldGFpbHNcIik7XG4gICAgICBwYXR0ZXJuc0hlYWRlci5jcmVhdGVFbChcInN1bW1hcnlcIiwgeyB0ZXh0OiBcIk1hbmFnZSBQYXR0ZXJuc1wiLCBjbHM6IFwicGlpLWNvbGxhcHNpYmxlLWhlYWRlclwiIH0pO1xuICAgICAgY29uc3QgcGF0dGVybnNDb250YWluZXIgPSBwYXR0ZXJuc0hlYWRlci5jcmVhdGVEaXYoXCJwaWktcGF0dGVybnMtY29udGFpbmVyXCIpO1xuXG4gICAgICAvLyBMb2FkIGRlZmF1bHQgcGF0dGVybnNcbiAgICAgIGNvbnN0IGRlZmF1bHRQYXR0ZXJuc0NvbnRlbnQgPSBhd2FpdCBsb2FkRGVmYXVsdFBhdHRlcm5zRnJvbUZpbGUodGhpcy5wbHVnaW4pO1xuICAgICAgY29uc3QgZGVmYXVsdFBhdHRlcm5zID0gcGFyc2VEZWZhdWx0UGF0dGVybnMoZGVmYXVsdFBhdHRlcm5zQ29udGVudCk7XG4gICAgICBcbiAgICAgIC8vIEluaXRpYWxpemUgcGF0dGVybk1ldGFkYXRhIGlmIGl0IGRvZXNuJ3QgZXhpc3QgKGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5KVxuICAgICAgaWYgKCF0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJuTWV0YWRhdGEpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0dGVybk1ldGFkYXRhID0gW107XG4gICAgICAgIC8vIE1pZ3JhdGUgZXhpc3RpbmcgcGF0dGVybnMgdG8gbWV0YWRhdGEgZm9ybWF0XG4gICAgICAgIGxldCB1c2VyUGF0dGVybkNvdW50ID0gMTtcbiAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5zKSB7XG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0dGVybk1ldGFkYXRhLnB1c2goe1xuICAgICAgICAgICAgcGF0dGVybixcbiAgICAgICAgICAgIHNvdXJjZTogXCJ1c2VyXCIsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogYFVzZXIgUGF0dGVybiAke3VzZXJQYXR0ZXJuQ291bnR9YFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHVzZXJQYXR0ZXJuQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgIH1cbiAgXG4gICAgICAvLyBQYXR0ZXJuIExpc3QgVUkgd2l0aCBlbmhhbmNlZCBuYW1pbmdcbiAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5NZXRhZGF0YS5mb3JFYWNoKChwYXR0ZXJuTWV0YSwgaWR4KSA9PiB7XG4gICAgICAgIGNvbnN0IHMgPSBuZXcgU2V0dGluZyhwYXR0ZXJuc0NvbnRhaW5lcilcbiAgICAgICAgICAuc2V0TmFtZShwYXR0ZXJuTWV0YS5kaXNwbGF5TmFtZSlcbiAgICAgICAgICAuYWRkVGV4dCgodCkgPT5cbiAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiXFxcXGR7Nn0tLi4uXCIpXG4gICAgICAgICAgICAgIC5zZXRWYWx1ZShwYXR0ZXJuTWV0YS5wYXR0ZXJuKVxuICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHYpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvbGRQYXR0ZXJuID0gcGF0dGVybk1ldGEucGF0dGVybjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHBhdHRlcm4gaW4gYm90aCBhcnJheXNcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJuc1tpZHhdID0gdjtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJuTWV0YWRhdGFbaWR4XS5wYXR0ZXJuID0gdjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgY291bnRyeSBwYXR0ZXJuLCB1cGRhdGUgdGhlIElOSSBmaWxlXG4gICAgICAgICAgICAgICAgYXdhaXQgdXBkYXRlUGF0dGVybkluSU5JKHRoaXMucGx1Z2luLCBvbGRQYXR0ZXJuLCB2LCBwYXR0ZXJuTWV0YS5zb3VyY2UsIGRlZmF1bHRQYXR0ZXJucyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYnRuKSA9PlxuICAgICAgICAgICAgYnRuXG4gICAgICAgICAgICAgIC5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJyZW1vdmVcIilcbiAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5zLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5NZXRhZGF0YS5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBJZiByZW1vdmluZyBhIGNvdW50cnkgcGF0dGVybiwgYWxzbyByZW1vdmUgZnJvbSBzZWxlY3RlZCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICBpZiAocGF0dGVybk1ldGEuc291cmNlICE9PSAndXNlcicpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ0NvdW50cnlQYXR0ZXJucyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5NZXRhZGF0YS5maWx0ZXIocCA9PiBwLnNvdXJjZSA9PT0gcGF0dGVybk1ldGEuc291cmNlKTtcbiAgICAgICAgICAgICAgICAgIGlmIChyZW1haW5pbmdDb3VudHJ5UGF0dGVybnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkQ291bnRyaWVzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0ZWRDb3VudHJpZXMuZmlsdGVyKGMgPT4gYyAhPT0gcGF0dGVybk1ldGEuc291cmNlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgcmVtb3ZlIGJ1dHRvbiBpZiB0aGVyZSdzIG9ubHkgb25lIHBhdHRlcm4gbGVmdFxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0dGVybnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgY29uc3QgYnV0dG9uID0gcy5jb250cm9sRWwucXVlcnlTZWxlY3RvcignYnV0dG9uJyk7XG4gICAgICAgICAgaWYgKGJ1dHRvbikgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIFxuICAgICAgLy8gKyBCdXR0b25cbiAgICAgIG5ldyBTZXR0aW5nKHBhdHRlcm5zQ29udGFpbmVyKS5hZGRCdXR0b24oKGJ0bikgPT5cbiAgICAgICAgYnRuXG4gICAgICAgICAgLnNldEJ1dHRvblRleHQoXCIrXCIpXG4gICAgICAgICAgLnNldFRvb2x0aXAoXCJBZGQgcGF0dGVyblwiKVxuICAgICAgICAgIC5zZXRDdGEoKVxuICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIENvdW50IGV4aXN0aW5nIHVzZXIgcGF0dGVybnMgdG8gZ2V0IHRoZSBuZXh0IG51bWJlclxuICAgICAgICAgICAgY29uc3QgdXNlclBhdHRlcm5Db3VudCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5NZXRhZGF0YS5maWx0ZXIocCA9PiBwLnNvdXJjZSA9PT0gJ3VzZXInKS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJucy5wdXNoKFwiXCIpO1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0dGVybk1ldGFkYXRhLnB1c2goe1xuICAgICAgICAgICAgICBwYXR0ZXJuOiBcIlwiLFxuICAgICAgICAgICAgICBzb3VyY2U6IFwidXNlclwiLFxuICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogYFVzZXIgUGF0dGVybiAke3VzZXJQYXR0ZXJuQ291bnR9YFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImhyXCIpO1xuICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IFwiRGVmYXVsdCBQYXR0ZXJuc1wiIH0pO1xuXG4gICAgICAvLyBVc2UgdGhlIGFscmVhZHkgbG9hZGVkIGRlZmF1bHQgcGF0dGVybnNcbiAgICAgIGNvbnN0IGF2YWlsYWJsZUNvdW50cmllcyA9IE9iamVjdC5rZXlzKGRlZmF1bHRQYXR0ZXJucykuZmlsdGVyKGMgPT4gYyAhPT0gJ05vbmUnKTtcblxuICAgICAgLy8gU2hvdyBjdXJyZW50bHkgc2VsZWN0ZWQgY291bnRyaWVzXG4gICAgICBjb25zdCBzZWxlY3RlZENvdW50cmllcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkQ291bnRyaWVzO1xuICAgICAgY29uc3Qgc2VsZWN0ZWRDb3VudHJ5TmFtZXMgPSBzZWxlY3RlZENvdW50cmllcy5tYXAoYyA9PiBkZWZhdWx0UGF0dGVybnNbY10/LmRpc3BsYXlOYW1lIHx8IGMpLmpvaW4oJywgJyk7XG4gICAgICBcbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAuc2V0TmFtZShcIlNlbGVjdGVkIENvdW50cmllc1wiKVxuICAgICAgICAuc2V0RGVzYyhzZWxlY3RlZENvdW50cmllcy5sZW5ndGggPiAwID8gc2VsZWN0ZWRDb3VudHJ5TmFtZXMgOiBcIk5vIGNvdW50cmllcyBzZWxlY3RlZFwiKVxuICAgICAgICAuYWRkQnV0dG9uKChidG4pID0+XG4gICAgICAgICAgYnRuXG4gICAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIkNsZWFyIEFsbFwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3RlZENvdW50cmllcyA9IFtdO1xuICAgICAgICAgICAgICAvLyBLZWVwIG9ubHkgdXNlciBwYXR0ZXJuc1xuICAgICAgICAgICAgICBjb25zdCB1c2VyUGF0dGVybnMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJuTWV0YWRhdGEuZmlsdGVyKHAgPT4gcC5zb3VyY2UgPT09ICd1c2VyJyk7XG4gICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5zID0gdXNlclBhdHRlcm5zLm1hcChwID0+IHAucGF0dGVybik7XG4gICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5NZXRhZGF0YSA9IHVzZXJQYXR0ZXJucztcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJDbGVhcmVkIGFsbCBzZWxlY3RlZCBjb3VudHJpZXNcIik7XG4gICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgLy8gQ291bnRyeSBzZWxlY3Rpb24gYnV0dG9uc1xuICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwiQWRkIENvdW50cnkgUGF0dGVybnNcIiB9KTtcbiAgICAgIGNvbnN0IGNvdW50cnlCdXR0b25zQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KFwicGlpLWNvdW50cnktYnV0dG9uc1wiKTtcbiAgICAgIFxuICAgICAgYXZhaWxhYmxlQ291bnRyaWVzLmZvckVhY2goY291bnRyeSA9PiB7XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSBkZWZhdWx0UGF0dGVybnNbY291bnRyeV07XG4gICAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3RlZENvdW50cmllcy5pbmNsdWRlcyhjb3VudHJ5KTtcbiAgICAgICAgXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvdW50cnlCdXR0b25zQ29udGFpbmVyKVxuICAgICAgICAgIC5zZXROYW1lKHBhdHRlcm4uZGlzcGxheU5hbWUpXG4gICAgICAgICAgLnNldERlc2MoYEFkZCBwYXR0ZXJucyBmb3IgJHtwYXR0ZXJuLmRpc3BsYXlOYW1lfWApXG4gICAgICAgICAgLmFkZEJ1dHRvbigoYnRuKSA9PlxuICAgICAgICAgICAgYnRuXG4gICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KGlzU2VsZWN0ZWQgPyBcIlJlbW92ZVwiIDogXCJBZGRcIilcbiAgICAgICAgICAgICAgLnNldENsYXNzKGlzU2VsZWN0ZWQgPyBcIm1vZC13YXJuaW5nXCIgOiBcIm1vZC1jdGFcIilcbiAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGN1cnJlbnQgc3RhdGUgaW5zdGVhZCBvZiB1c2luZyBzdGFsZSBpc1NlbGVjdGVkXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudGx5U2VsZWN0ZWQgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3RlZENvdW50cmllcy5pbmNsdWRlcyhjb3VudHJ5KTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudGx5U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjb3VudHJ5IGFuZCBpdHMgcGF0dGVybnNcbiAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkQ291bnRyaWVzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0ZWRDb3VudHJpZXMuZmlsdGVyKGMgPT4gYyAhPT0gY291bnRyeSk7XG4gICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGNvdW50cnkncyBwYXR0ZXJucyBmcm9tIGJvdGggYXJyYXlzXG4gICAgICAgICAgICAgICAgICBjb25zdCBhbGxDb3VudHJ5UGF0dGVybnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICAgICAgICBpZiAocGF0dGVybi5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVQYXR0ZXJucyA9IHBhdHRlcm4ubmFtZS5zcGxpdCgnfCcpLmZpbHRlcihwID0+IHAudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgYWxsQ291bnRyeVBhdHRlcm5zLnB1c2goLi4ubmFtZVBhdHRlcm5zKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChwYXR0ZXJuLmFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzc1BhdHRlcm5zID0gcGF0dGVybi5hZGRyZXNzLnNwbGl0KCd8JykuZmlsdGVyKHAgPT4gcC50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICBhbGxDb3VudHJ5UGF0dGVybnMucHVzaCguLi5hZGRyZXNzUGF0dGVybnMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHBhdHRlcm4ucGhvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGhvbmVQYXR0ZXJucyA9IHBhdHRlcm4ucGhvbmUuc3BsaXQoJ3wnKS5maWx0ZXIocCA9PiBwLnRyaW0oKSk7XG4gICAgICAgICAgICAgICAgICAgIGFsbENvdW50cnlQYXR0ZXJucy5wdXNoKC4uLnBob25lUGF0dGVybnMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0dGVybnMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJucy5maWx0ZXIocCA9PiAhYWxsQ291bnRyeVBhdHRlcm5zLmluY2x1ZGVzKHApKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5NZXRhZGF0YSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5NZXRhZGF0YS5maWx0ZXIocCA9PiBwLnNvdXJjZSAhPT0gY291bnRyeSk7XG4gICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBSZW1vdmVkICR7cGF0dGVybi5kaXNwbGF5TmFtZX0gcGF0dGVybnNgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gQWRkIGNvdW50cnkgYW5kIGl0cyBwYXR0ZXJucyAoY2hlY2sgaWYgbm90IGFscmVhZHkgc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkQ291bnRyaWVzLmluY2x1ZGVzKGNvdW50cnkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkQ291bnRyaWVzLnB1c2goY291bnRyeSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGAke3BhdHRlcm4uZGlzcGxheU5hbWV9IGlzIGFscmVhZHkgc2VsZWN0ZWRgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBjb3VudHJ5J3MgcGF0dGVybnMgdG8gYm90aCBhcnJheXNcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgLy8gQWRkIG5hbWUgcGF0dGVybnMgZmlyc3RcbiAgICAgICAgICAgICAgICAgIGlmIChwYXR0ZXJuLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZVBhdHRlcm5zID0gcGF0dGVybi5uYW1lLnNwbGl0KCd8JykuZmlsdGVyKHAgPT4gcC50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJucyA9IFsuLi50aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJucywgLi4ubmFtZVBhdHRlcm5zXTtcbiAgICAgICAgICAgICAgICAgICAgbmFtZVBhdHRlcm5zLmZvckVhY2goKG5hbWVQYXR0ZXJuLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5NZXRhZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IG5hbWVQYXR0ZXJuLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBjb3VudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IGAke2NvdW50cnl9IE5hbWUgJHtpbmRleCArIDF9YFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgLy8gQWRkIGFkZHJlc3MgcGF0dGVybnNcbiAgICAgICAgICAgICAgICAgIGlmIChwYXR0ZXJuLmFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzc1BhdHRlcm5zID0gcGF0dGVybi5hZGRyZXNzLnNwbGl0KCd8JykuZmlsdGVyKHAgPT4gcC50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJucyA9IFsuLi50aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJucywgLi4uYWRkcmVzc1BhdHRlcm5zXTtcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzc1BhdHRlcm5zLmZvckVhY2goKGFkZHJlc3NQYXR0ZXJuLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdHRlcm5NZXRhZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IGFkZHJlc3NQYXR0ZXJuLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBjb3VudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IGAke2NvdW50cnl9IEFkZHJlc3MgJHtpbmRleCArIDF9YFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgLy8gQWRkIHBob25lIHBhdHRlcm5zXG4gICAgICAgICAgICAgICAgICBpZiAocGF0dGVybi5waG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaG9uZVBhdHRlcm5zID0gcGF0dGVybi5waG9uZS5zcGxpdCgnfCcpLmZpbHRlcihwID0+IHAudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0dGVybnMgPSBbLi4udGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0dGVybnMsIC4uLnBob25lUGF0dGVybnNdO1xuICAgICAgICAgICAgICAgICAgICBwaG9uZVBhdHRlcm5zLmZvckVhY2goKHBob25lUGF0dGVybiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXR0ZXJuTWV0YWRhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBwaG9uZVBhdHRlcm4sXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGNvdW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogYCR7Y291bnRyeX0gUGhvbmUgJHtpbmRleCArIDF9YFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEFkZGVkICR7cGF0dGVybi5kaXNwbGF5TmFtZX0gcGF0dGVybnNgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImhyXCIpO1xuICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IFwiUGFzc3dvcmQgTWFuYWdlbWVudFwiIH0pO1xuXG4gICAgICAvLyBQYXNzd29yZCBzdGF0dXNcbiAgICAgIGNvbnN0IGhhc1N0b3JlZFBhc3N3b3JkID0gISF0aGlzLnBsdWdpbi5zZXR0aW5ncy5zdG9yZWRQYXNzd29yZDtcbiAgICAgIGNvbnN0IHN0YXR1c1RleHQgPSBoYXNTdG9yZWRQYXNzd29yZCA/IFwiUGFzc3dvcmQgaXMgY3VycmVudGx5IHN0b3JlZFwiIDogXCJObyBwYXNzd29yZCBzdG9yZWRcIjtcbiAgICAgIGNvbnN0IHN0YXR1c0VsID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHsgXG4gICAgICAgIHRleHQ6IHN0YXR1c1RleHQsXG4gICAgICAgIGNsczogaGFzU3RvcmVkUGFzc3dvcmQgPyBcInBpaS1wYXNzd29yZC1zdGF0dXMtYWN0aXZlXCIgOiBcInBpaS1wYXNzd29yZC1zdGF0dXMtaW5hY3RpdmVcIlxuICAgICAgfSk7XG5cbiAgICAgIC8vIENoYW5nZSBwYXNzd29yZCBidXR0b25cbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAuc2V0TmFtZShoYXNTdG9yZWRQYXNzd29yZCA/IFwiQ2hhbmdlIFBhc3N3b3JkXCIgOiBcIlNldCBQYXNzd29yZFwiKVxuICAgICAgICAuc2V0RGVzYyhoYXNTdG9yZWRQYXNzd29yZCA/IFwiVXBkYXRlIHlvdXIgZW5jcnlwdGlvbiBwYXNzd29yZFwiIDogXCJTZXQgYSBwYXNzd29yZCBmb3IgZW5jcnlwdGlvbiBvcGVyYXRpb25zXCIpXG4gICAgICAgIC5hZGRCdXR0b24oKGJ0bikgPT5cbiAgICAgICAgICBidG5cbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KGhhc1N0b3JlZFBhc3N3b3JkID8gXCJDaGFuZ2VcIiA6IFwiU2V0XCIpXG4gICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5oYW5kbGVQYXNzd29yZENoYW5nZSgpO1xuICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTsgLy8gUmVmcmVzaCB0aGUgZGlzcGxheVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgLy8gQ2xlYXIgcGFzc3dvcmQgYnV0dG9uIChvbmx5IHNob3cgaWYgcGFzc3dvcmQgaXMgc3RvcmVkKVxuICAgICAgaWYgKGhhc1N0b3JlZFBhc3N3b3JkKSB7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgIC5zZXROYW1lKFwiQ2xlYXIgU3RvcmVkIFBhc3N3b3JkXCIpXG4gICAgICAgICAgLnNldERlc2MoXCJSZW1vdmUgdGhlIHN0b3JlZCBwYXNzd29yZC4gWW91IHdpbGwgYmUgcHJvbXB0ZWQgZm9yIHBhc3N3b3JkIG9uIGVhY2ggb3BlcmF0aW9uLlwiKVxuICAgICAgICAgIC5hZGRCdXR0b24oKGJ0bikgPT5cbiAgICAgICAgICAgIGJ0blxuICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIkNsZWFyXCIpXG4gICAgICAgICAgICAgIC5zZXRXYXJuaW5nKClcbiAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnN0b3JlZFBhc3N3b3JkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJQYXNzd29yZCBjbGVhcmVkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTsgLy8gUmVmcmVzaCB0aGUgZGlzcGxheVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gICIsICJpbXBvcnQgdHlwZSBQaWlMb2NrUGx1Z2luIGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBzY2FuVmF1bHQgfSBmcm9tIFwiLi9zY2FubmVyXCI7XG5pbXBvcnQgeyBlbmNyeXB0LCBkZWNyeXB0IH0gZnJvbSBcIi4vY3J5cHRvXCI7XG5pbXBvcnQgeyBSZXN1bHRzTW9kYWwgfSBmcm9tIFwiLi4vdWkvUmVzdWx0c01vZGFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckNvbW1hbmRzKHBsdWdpbjogUGlpTG9ja1BsdWdpbikge1xuICAvKiAxLiBTY2FuICovXG4gIHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICBpZDogXCJwaWktc2NhblwiLFxuICAgIG5hbWU6IFwiUElJXHUwMEEwU2NhblwiLFxuICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgc2NhblZhdWx0KHBsdWdpbik7XG4gICAgICBuZXcgUmVzdWx0c01vZGFsKHBsdWdpbi5hcHAsIHJlc3VsdHMpLm9wZW4oKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAyLiBMb2NrIChNYXRjaGluZyB0b2tlbml6YXRpb24gKyBlbmNyeXB0ZWQgc3RvcmFnZSkgKi9cbiAgcGx1Z2luLmFkZENvbW1hbmQoe1xuICAgIGlkOiBcInBpaS1sb2NrXCIsXG4gICAgbmFtZTogXCJQSUlcdTAwQTBMb2NrIChlbmNyeXB0KVwiLFxuICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAvLyBUT0RPOiBBY3R1YWwgaW1wbGVtZW50YXRpb24gLSBtYXRjaGVzIFx1MjE5MiB0b2tlbiByZXBsYWNlbWVudCwgZW5jcnlwdCgpLCBzYXZlRGF0YSgpXG4gICAgfSxcbiAgfSk7XG5cbiAgLyogMy4gVW5sb2NrICovXG4gIHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICBpZDogXCJwaWktdW5sb2NrXCIsXG4gICAgbmFtZTogXCJQSUlcdTAwQTBVbmxvY2sgKGRlY3J5cHQpXCIsXG4gICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgIC8vIFRPRE86IEVudGVyIHBhc3N3b3JkIFx1MjE5MiBkZWNyeXB0KCkgXHUyMTkyIHJldmVydCB0b2tlblxuICAgIH0sXG4gIH0pO1xufVxuIiwgIi8vIHVpL1Jlc3VsdHNNb2RhbC50c1xuaW1wb3J0IHsgQXBwLCBNb2RhbCwgTWFya2Rvd25WaWV3LCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHR5cGUgeyBNYXRjaEluZm8gfSBmcm9tIFwiLi4vc3JjL3NjYW5uZXJcIjtcblxuZXhwb3J0IGNsYXNzIFJlc3VsdHNNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgY29uc3RydWN0b3IoXG4gICAgYXBwOiBBcHAsXG4gICAgcHJpdmF0ZSBtYXRjaGVzOiBNYXRjaEluZm9bXVxuICApIHtcbiAgICBzdXBlcihhcHApO1xuICB9XG5cbiAgb25PcGVuKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIGNvbnRlbnRFbC5hZGRDbGFzcyhcInBpaS1tb2RhbFwiKTtcbiAgICBjb250ZW50RWwuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IGBQSUlcdTAwQTBNYXRjaGVzICgke3RoaXMubWF0Y2hlcy5sZW5ndGh9KWAgfSk7XG5cbiAgICBpZiAoIXRoaXMubWF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcInBcIiwgeyB0ZXh0OiBcIk5vIFBJSSBmb3VuZCBcdUQ4M0NcdURGODlcIiB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKiBMaXN0IERPTSAqL1xuICAgIGNvbnN0IGxpc3QgPSBjb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwicGlpLWxpc3RcIiB9KTtcblxuICAgIHRoaXMubWF0Y2hlcy5mb3JFYWNoKChtLCBpZHgpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBsaXN0LmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcInBpaS1pdGVtXCIgfSk7XG5cbiAgICAgIC8qIFx1MjcxNFx1RkUwRSBDaGVja2JveCAqL1xuICAgICAgY29uc3QgY2IgPSBpdGVtLmNyZWF0ZUVsKFwiaW5wdXRcIiwgeyB0eXBlOiBcImNoZWNrYm94XCIgfSkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgIGNiLmNoZWNrZWQgPSB0cnVlOyAvLyBEZWZhdWx0IHNlbGVjdGlvblxuXG4gICAgICAvKiBNYXRjaGluZyBzdHJpbmcgKyBsb2NhdGlvbiAqL1xuICAgICAgaXRlbS5jcmVhdGVFbChcInNwYW5cIiwge1xuICAgICAgICB0ZXh0OiBgJHttLnRleHR9ICBcdTIwMTQgICR7bS5maWxlLmJhc2VuYW1lfToke20ubGluZSArIDF9YCxcbiAgICAgICAgY2xzOiBcInBpaS10ZXh0XCIsXG4gICAgICB9KTtcblxuICAgICAgLyogXHUyNUI2XHVGRTBFIE9wZW4gZmlsZSBidXR0b24gKi9cbiAgICAgIGNvbnN0IGdvQnRuID0gaXRlbS5jcmVhdGVFbChcImJ1dHRvblwiLCB7IHRleHQ6IFwiT3BlblwiIH0pO1xuICAgICAgZ29CdG4ub25jbGljayA9ICgpID0+IHRoaXMub3BlbkF0UG9zaXRpb24obSk7XG4gICAgfSk7XG5cbiAgICAvKiBDbG9zZSBidXR0b24gKi9cbiAgICBjb250ZW50RWwuY3JlYXRlRWwoXCJidXR0b25cIiwge1xuICAgICAgdGV4dDogXCJDbG9zZVwiLFxuICAgICAgY2xzOiBcIm1vZC1jdGFcIixcbiAgICB9KS5vbmNsaWNrID0gKCkgPT4gdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgLyoqIE9wZW4gdGhlIHNhbWUgZmlsZSBhbmQgbW92ZSBjdXJzb3IgKi9cbiAgcHJpdmF0ZSBhc3luYyBvcGVuQXRQb3NpdGlvbihtOiBNYXRjaEluZm8pIHtcbiAgICBjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoZmFsc2UpO1xuICAgIGF3YWl0IGxlYWYub3BlbkZpbGUobS5maWxlKTtcbiAgICBjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcbiAgICBpZiAodmlldykgdmlldy5lZGl0b3Iuc2V0Q3Vyc29yKHsgbGluZTogbS5saW5lLCBjaDogbS5jb2wgfSk7XG4gIH1cblxuICBvbkNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVBLGVBQXNCLFVBQVUsUUFBNkM7QUFDM0UsUUFBTSxRQUFRLE9BQU8sSUFBSTtBQUN6QixRQUFNLFdBQVcsT0FBTyxTQUFTLFNBQVMsSUFBSSxPQUFLLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUNyRSxRQUFNLFVBQXVCLENBQUM7QUFFOUIsYUFBVyxRQUFRLE1BQU0saUJBQWlCLEdBQUc7QUFDM0MsVUFBTSxVQUFVLE1BQU0sTUFBTSxXQUFXLElBQUk7QUFDM0MsVUFBTSxRQUFRLFFBQVEsTUFBTSxJQUFJO0FBRWhDLFVBQU0sUUFBUSxDQUFDLFVBQVUsWUFBWTtBQUNuQyxlQUFTLFFBQVEsUUFBTTtBQXBCN0I7QUFxQlEsbUJBQVcsS0FBSyxTQUFTLFNBQVMsRUFBRSxHQUFHO0FBQ3JDLGtCQUFRLEtBQUs7QUFBQSxZQUNYO0FBQUEsWUFDQSxNQUFNO0FBQUEsWUFDTixNQUFLLE9BQUUsVUFBRixZQUFXO0FBQUEsWUFDaEIsTUFBTSxFQUFFLENBQUM7QUFBQSxVQUNY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LE1BQU07QUFBQSxJQUNOLFVBQVUsWUFBWTtBQUNwQixZQUFNLFVBQVUsTUFBTSxVQUFVLE1BQU07QUFDdEMsVUFBSSxhQUFhLE9BQU8sS0FBSyxPQUFPLEVBQUUsS0FBSztBQUFBLElBQzdDO0FBQUEsRUFDRixDQUFDO0FBR0QsU0FBTyxXQUFXO0FBQUEsSUFDaEIsSUFBSTtBQUFBLElBQ0osTUFBTTtBQUFBLElBQ04sVUFBVSxNQUFNO0FBQUEsSUFFaEI7QUFBQSxFQUNGLENBQUM7QUFHRCxTQUFPLFdBQVc7QUFBQSxJQUNoQixJQUFJO0FBQUEsSUFDSixNQUFNO0FBQUEsSUFDTixVQUFVLE1BQU07QUFBQSxJQUVoQjtBQUFBLEVBQ0YsQ0FBQztBQUNIOzs7QUY5QkE7QUFFQSxJQUFxQixnQkFBckIsY0FBMkMsd0JBQU87QUFBQTtBQUFBLEVBSWhELE1BQU0sU0FBUztBQUNiLFVBQU0sS0FBSyxhQUFhO0FBR3hCLFNBQUs7QUFBQSxNQUNIO0FBQUEsTUFDQSxDQUFDLFNBQXlCLElBQUksZUFBZSxNQUFNLElBQUk7QUFBQSxJQUN6RDtBQUdBLFNBQUssY0FBYyxVQUFVLGlCQUFpQixNQUFNLEtBQUssZ0JBQWdCLENBQUM7QUFHMUUsU0FBSyxjQUFjLElBQUksY0FBYyxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ3BELHFCQUFpQixJQUFJO0FBQUEsRUFDdkI7QUFBQSxFQUVBLFdBQVc7QUFDVCxTQUFLLElBQUksVUFBVSxtQkFBbUIsYUFBYTtBQUFBLEVBQ3JEO0FBQUE7QUFBQSxFQUdBLE1BQWMsa0JBQWtCO0FBRTlCLFVBQU0sU0FBUyxLQUFLLElBQUksVUFBVSxnQkFBZ0IsYUFBYTtBQUUvRCxRQUFJLE9BQU8sU0FBUyxHQUFHO0FBRXJCLFdBQUssSUFBSSxVQUFVLFdBQVcsT0FBTyxDQUFDLENBQUM7QUFDdkM7QUFBQSxJQUNGO0FBR0EsVUFBTSxPQUFPLEtBQUssSUFBSSxVQUFVLFlBQVksS0FBSztBQUNqRCxVQUFNLEtBQUssYUFBYTtBQUFBLE1BQ3RCLE1BQU07QUFBQSxNQUNOLFFBQVE7QUFBQSxJQUNWLENBQUM7QUFFRCxTQUFLLElBQUksVUFBVSxXQUFXLElBQUk7QUFBQSxFQUNwQztBQUFBLEVBRUEsTUFBYyxlQUFlO0FBQzNCLFVBQU0sUUFBUSxNQUFNLEtBQUssU0FBUztBQUNsQyxTQUFLLFdBQVcsRUFBRSxHQUFHLGtCQUFrQixHQUFHLE1BQU07QUFBQSxFQUNsRDtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ25CLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ25DO0FBQ0Y7IiwKICAibmFtZXMiOiBbImUiLCAicHdkIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiUHdNb2RhbCIsICJpbXBvcnRfb2JzaWRpYW4iXQp9Cg==
